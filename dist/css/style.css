@charset "UTF-8";
/**
 * Scope the entire css stack inside a class
 * to avoid conflict with pages where it will be included
 */
/**
* Vendors
* All external librarie needed in the project.
*/
/**
 * Vendors
 * All external librarie needed in the project.
 */
/**
 * Parse and return the Map respresentation of a border property
 * The $border argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 		{List} 			$border 			The border property to parse
 * @return 		{Map} 								The Map represenration of the border
 *
 * @example
 * s-border(1px solid white);
 * // return
 * // (
 * // 	width : 1px,
 * // 	color : white,
 * // 	style : solid
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the Map representation of a columns properties
 * @param  		{Interger} 			[$count=null] 			The number of columns
 * @param 		{Number} 			[$gap=null] 			The gap width between each columns
 * @param 		{String} 			[$fill=null] 			The fill property (balance,auto,initial,inherit)
 * @param 		{Number} 			[$width=null] 			The width of the columns
 * @param 		{Integer|String} 	[$span=null] 			The column-span property (1,all,initial,inherit)
 * @param 		{List} 				[$rule=null] 			The column-rule property
 * @param 		{String} 			[$rule-style=null]  	The column-rule-style property
 * @param 		{Color} 			[$rule-color=null] 		The column-rule-color property
 * @param 		{Number} 			[$rule-width=null] 		The column-rule-width property
 * @return 		{Map} 										The map representation or the columns properties
 *
 * @example
 * s-columns(2, 20px);
 * // return
 * // (
 * // 	column-count : 2,
 * // 	column-gap : 20px
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Parse and return the Map respresentation of a margin property
 * The $margin argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 			{List|Number} 			$margin 			The margin property to parse
 * @return 			{Map} 										The map representation
 *
 * @example
 * s-margin(10px); // => ( top:10px, right:10px, bottom:10px, left:10px )
 * s-margin(10px 20px); // => ( top:10px, right:20px, bottom:10px, left:20px )
 * s-margin(5px 10px 15px 20px); // => ( top:5px, right:10px, bottom:15px, left:20px )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the representation of a position styling like position:absolute; top:0; left:100%; etc...
 * This function gives you some shortcuts to align your element top, bottom, middle, center, etc...
 *
 * @param 		{String} 			[$position=absolute] 			The position css property
 * @param 		{String} 			[$vertical-align=top] 			The vertical alignement wanted (top,middle,bottom)
 * @param 		{String} 			[$align=left] 					The horizontal alignement wanted (left,center,right)
 * @param 		{Number} 			[$top=null] 					The top property wanted
 * @param 		{Number} 			[$right=null] 					The right property wanted
 * @param 		{Number} 			[$bottom=null] 					The bottom property wanted
 * @param 		{Number} 			[$left=null] 					The left property wanted
 * @return 		{Map} 												The map representation of the position wanted
 *
 * @example
 * s-position(absolute, top, right);
 * s-position(absolute, middle, center);
 * s-position(relative, bottom, right);
 * s-position(absolute, bottom, center);
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the Map properties representation for the rhythme width
 * The rhythme width is the width of an element that target a certain number of letters by line
 *
 * @param 			{Integer} 			[$letters-count=settings.typography.line-letters-count] 		The number of letters to target by line
 * @return 			{Map} 																		The Map properties representation
 *
 * @example
 * s-rhythme-width(50);
 * // return
 * // (
 * // 	display : block,
 * // 	max-width : 50ex
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the Map properties representation of a translate x,y and z
 *
 * @param 			{Number} 			[$x=0] 			The x translate value
 * @param 			{Number} 			[$y=0] 			The y translate value
 * @param 			{Number} 			[$z=0] 			The z translate value
 * @return 			{Map} 								The translate Map representation
 *
 * @example
 * s-translate(10px,20px);
 * // return
 * // (
 * // 	transform: translateX(10px) translateY(20px) translateZ(0)
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the settings.vertical-rhythme.scope-class value
 *
 * @return 			{String} 			The settings.vertical-rhythme.scope-class value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Helper mixin to set a background image
 *
 * @param 			{String} 				[$repeat=null] 				The background-repeat property
 * @param 			{String} 				[$size=null] 				The background-size property
 * @param 			{String} 				[$attachment=null] 			The background-attachment property
 * @param 			{String} 				[$blend-mode=null] 			The background-blend-mode property
 * @param 			{String} 				[$clip=null] 				The background-clip property
 * @param 			{String} 				[$url=null] 				The background-image url property
 * @param 			{Number} 				[$width=null] 				The background-size width property
 * @param 			{Number} 				[$height=null] 				The background-size height property
 * @param 			{Number} 				[$top=null] 				The background-position top property
 * @param 			{Number} 				[$left=null] 				The background-position left property
 * @param 			{String} 				[$suffix2x=@2x] 			The suffix to add the the url if the 2x resolution if wanted
 * @param 			{String} 				[$suffix3x=@3x] 			The suffix to add the the url if the 3x resolution if wanted
 * @param 			{String} 				[$suffix4x=@4x] 			The suffix to add the the url if the 4x resolution if wanted
 * @param 			{List} 					[$resolution=null] 			The resolution wanted like 2x, 3x and 4x
 * @param 			{List} 					[$position=null] 			The background-position property
 *
 * @example
 * .my-cool-element {
 * 		\@include s-background(
 * 			$url : 'img/my-cool-image.jpg',
 * 			$size : cover,
 * 			resolution : 2x 3x 4x
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	BEM mixins
 * Some useful mixins to work with BEM methodology
 */
/**
 * BEM block selector
 * @param 		{String} 				$name 		The block name
 * @param 		{String|List<String>} 	[$extend=false] 	The list of item to extends
 * @example 	scss
 * \@include s-Bem('card') {
 *  	background: white;
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * BEM element selector
 * @param 		{String} 				$name 		The block name
 * @param 		{String|List<String>} 	[$extend=false] 	The list of item to extends
 * @example 	scss
 * \@include s-Bem(card) {
 * 	background:white;
 *
 * 	\@include s-bEm(title) {
 * 		font-size:20px;
 * 	}
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * BEM modifier selector
 * @param 		{String} 				$name 		The block name
 * @param 		{String|List<String>} 	[$extend=false] 	The list of item to extends
 * @param 		{Boolean} 				[$standelone=s-setting('BEM.standelone')] 		If true, will automatically extends the base element
 * @example 	scss
 * \@include s-Bem(card) {
 * 	background:white;
 *
 * 	\@include s-beM(blue) {
 * 		background: blue;
 * 	}
 * }
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply some border radius
 * @param 		{Number} 		[$radius=null] 			The radius to apply globally
 * @param 		{Number} 		[$top=null] 			The radius to apply on top corners
 * @param 		{Number} 		[$right=null] 			The radius to apply on right corners
 * @param 		{Number} 		[$bottom=null] 			The radius to apply on bottom corners
 * @param 		{Number} 		[$left=null] 			The radius to apply on left corners
 * @param 		{Number} 		[$top-left=null] 		The radius to apply on top-left corners
 * @param 		{Number} 		[$top-right=null] 		The radius to apply on top-right corners
 * @param 		{Number} 		[$bottom-left=null] 	The radius to apply on bottom-left corners
 * @param 		{Number} 		[$bottom-right=null] 	The radius to apply on bottom-right corners
 *
 * @example 	scss
 * .my-cool-item {
 * 	// apply on top left and right corners
 * 	\@include s-border-radius(
 * 		$top : 10px;
 * 	);
 * 	// apply on each corners
 * 	\@include s-border-radius(10px);
 * 	// etc...
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Center a block element using margins etc...
 * @example 	scss
 * .my-cool-block-element {
 * 	\@include s-center-block();
 * }
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	s-clearfix
 * Apply a clearfix on the element.
 * Supported methods:
 * - micro
 * - facebook
 * - float
 * - micro
 *
 * @param 		{String} 		[$method=micro] 		The clearfix method to use
 *
 * @example 	scss
 * .my-cool-element {
 *  \@include s-clearfix();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
#template-stack .clearfix-overflow {
  overflow: hidden;
}

#template-stack .clearfix-facebook {
  display: table-cell;
  vertical-align: top;
  width: 10000px !important;
}

#template-stack .clearfix-float {
  float: left;
  width: 100%;
}

#template-stack .clearfix, #template-stack .clearfix-micro {
  zoom: 1;
}

#template-stack .clearfix:before, #template-stack .clearfix-micro:before, #template-stack .clearfix:after, #template-stack .clearfix-micro:after {
  content: " ";
  display: table;
}

#template-stack .clearfix:after, #template-stack .clearfix-micro:after {
  clear: both;
}

/**
 * Display a coffeekraken logo with two specified colors
 * @param 		{Color} 		[$color=default] 	The base color to use
 * @param 		{Color} 		[$accent=primary] 	The accent color to use
 *
 * @example 	scss
 * .my-cool-coffeekraken-logo {
 * 	\@include s-coffeekraken-logo();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Create a column layout my setting each columns properties at once
 * @param 		{Integer} 		[$count=null] 		The number of columns wanted
 * @param 		{Number} 		[$gap=null] 		The column-gap width wanted
 * @param 		{String} 		[$fill=null] 		The column-fill wanted
 * @param 		{Number} 		[$width=null] 		THe width of each columns wanted
 * @param 		{String} 		[$span=null] 		Specify on how many columns the element has to span across
 * @param 		{List} 			[$rule=null] 		Specify the shorthand version of the column-rule-color, column-rule-style and column-rule-width
 * @param 		{String} 		[$rule-style=null] 	Specify the column-rule-style wanted
 * @param 		{Color} 		[$rule-color=null] 	Specify the column-rule-color wanted
 * @param 		{Number} 		[$rule-width=null] 	Specify the column-rule-width wanted
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include s-columns(
 * 		$count : 3,
 * 		$gap : 30px,
 * 		$span : solid s-color(primary) 20px
 * 	);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply some border radius
 * @param 		{Number} 		[$radius=null] 			The radius to apply globally
 * @param 		{Number} 		[$top=null] 			The radius to apply on top corners
 * @param 		{Number} 		[$right=null] 			The radius to apply on right corners
 * @param 		{Number} 		[$bottom=null] 			The radius to apply on bottom corners
 * @param 		{Number} 		[$left=null] 			The radius to apply on left corners
 * @param 		{Number} 		[$top-left=null] 		The radius to apply on top-left corners
 * @param 		{Number} 		[$top-right=null] 		The radius to apply on top-right corners
 * @param 		{Number} 		[$bottom-left=null] 	The radius to apply on bottom-left corners
 * @param 		{Number} 		[$bottom-right=null] 	The radius to apply on bottom-right corners
 *
 * @example 	scss
 * .my-cool-item {
 * 	// apply on top left and right corners
 * 	\@include s-corner(
 * 		$top : 10px;
 * 	);
 * 	// apply on each corners
 * 	\@include s-corner(10px);
 * 	// etc...
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@keyframes s-DOMNodeInserted {
  from {
    opacity: .99;
  }
  to {
    opacity: 1;
  }
}

/**
 * Make the element fit his container.
 * @param 	{String} 			[$position=null] 		The position how to fit the element.
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include s-fit(absolute);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Hide the contained text
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include s-hide-text();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply an icon on the element. This mixin support font-awesome and custom icons systems that have an icon name formated like "icon-{name}"
 * @param 		{String} 		$name 		The icon name to apply
 *
 * @example 	scss
 * .my-cool-icon {
 * 	\@include s-icon(fa-user);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set how to render the image
 * @param 		{String} 		[$mode=auto] 		The mode to use to render the image
 *
 * @example 	scss
 * img {
 * 	\@include s-image-rendering(crips-edges);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set how the list bullet has to be displayed.
 * @param 		{String} 		[$type=null] 				The list type to use. Can be all the list-style-type values
 * @param 		{Url} 			[$image=null] 				An image url to use as bullet
 * @param 		{String} 		[$icon=null] 				An icon name to use as bullet. Will use the s-icon mixin under the hood
 * @param 		{Color} 		[$color=s-color(default)] 	The color to use for the bullet
 * @param 		{Number} 		[$size=null] 				The size to use for the bullet
 * @param 		{Number|List<Number>} 	[$offset=null] 		A number that represent the top offset, or a list of two numbers that represent the top, left offset
 * @param 		{String} 		[$font=null] 				The font name to use for the bullet
 * @param 		{Number} 		[$space=null] 				The space between the bullet and the content
 *
 * @example 	scss
 * .my-cool-list__item {
 * 	@\include s-list-bullet(
 * 		$image : '../img/my-cool-bullet.svg',
 * 		$offset : 5px 10px,
 * 		$size : 1em,
 * 		$space : 2em
 * 	);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Start a new list
 * @param 		{String} 		[$counter-reset=s-list] 		A counter name to reset
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Easy to use media query mixin that support cssua classes to target specific browsers
 * @param 		{String} 		[$screen=null] 			Any of the @media screen type property like "screen, handheld, print, etc..."
 * @param 		{Number} 		[$min-width=null] 		The min width to target
 * @param 		{Number} 		[$max-width=null] 		The max width to target
 * @param 		{Number} 		[$min-height=null] 		The min height to target
 * @param 		{Number} 		[$max-height=null] 		The max height to target
 * @param 		{String} 		[$orientation=null] 	The orientation to target. Can be portrait or landscape
 * @param 		{String} 		[$resolution=null] 		The resolution to target. Can be 2x, 3x, 4x, etc...
 * @param 		{String} 		[$engine=null] 			The engine that powers the display. Can be gecko, webkit, trident, blink or presto
 * @param 		{String} 		[$device=null] 			The device to target. Can be mobile, tablet, desktop, iphone or ipad
 * @param 		{String} 		[$browser=null] 		The browser(s) to target. Can be chrome, safari, firefox, opera, ie, ie6-20
 * @param 		{String} 		[$system=null] 			The system(s) to target. Can be ios, osx, windows, linux, android, webos or blackberry
 *
 * @example 	scss
 * // simple min width
 * \@include s-media(
 * 	$min-width : 200px
 * ) {
 * 	// custom css here...
 * }
 *
 * // target a specific engine
 * \@include s-media(
 * 	$engine : gecko webkit
 * ) {
 * 	// custom css here
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the placeholder style for inputs, etc...
 *
 * @example 	scss
 * input, textarea {
 * 	\@include s-placeholder() {
 * 		color : red;
 * 	}
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set a complexe position styling like position:absolute; top:0; left:100%; etc...
 * This mixin gives you some shortcuts to align your element top, bottom, middle, center, etc...
 *
 * @param 		{String} 			[$position=absolute] 			The position css property
 * @param 		{String} 			[$vertical-align=top] 			The vertical alignement wanted (top,middle,bottom)
 * @param 		{String} 			[$align=left] 					The horizontal alignement wanted (left,center,right)
 * @param 		{Number} 			[$top=null] 					The top property wanted
 * @param 		{Number} 			[$right=null] 					The right property wanted
 * @param 		{Number} 			[$bottom=null] 					The bottom property wanted
 * @param 		{Number} 			[$left=null] 					The left property wanted
 * @return 		{Map} 												The map representation of the position wanted
 *
 * @example
 * .my-cool-element {
 * 	// absolute top right
 * 	\@include s-position(absolute, top, right);
 * 	// custom right and bottom values
 * 	\@include s-position(absolute,
 * 		$bottom : 20px,
 * 		$right : 20px
 * 	);
 * 	// etc...
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply a ratio css styling. This will apply a before or after content that will make the element keep the specified ratio.
 * The content need to be displayed as absolute top left and fit in size.
 *
 * @param 		{Number} 		$ratio 			The ratio to keep like 16/9, etc...
 * @param 		{String} 		[$type=before] 	The type of ratio to apply. Can be before or after
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include s-ratio(16/9);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out a reset css
 * @example 	scss
 *
 * \@include s-reset();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out the css on a container that will make the lines displays a maximum number of characters.
 *
 * @example 	scss
 * h1 {
 * 	\@include s-rhythme-width(45);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply some css to have a rounded element with already an overflow on it
 *
 * @param 		{Number} 		[$size=null] 		The size (width and height) of the element wanted
 * @param 		{Number} 		[$width=null] 		The width of the element wanted
 * @param 		{Number} 		[$height=null] 		The height of the element wanted
 *
 * @example 	scss
 * .my-cool-image {
 * 	\@include s-round(100px);
 *
 * 	img {
 * 		\@include s-size(cover);
 * 	}
 * }
 */
/**
 * Quicky and easily set simple or complexe size to any element
 * @param 		{String|Number} 		$size-width				The size like "cover" or "contain", or the width un number
 * @param 		{Number} 				[$height=null] 			The height wanted
 * @param 		{String} 				[$position=absolute] 	The position wanted if the size is "cover" or "contain"
 *
 * @example 	scss
 * .my-cool-image {
 * 	\@include s-size(cover);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Quicky set some translates
 * @param 		{Number} 		[$x=0] 		The x translate value
 * @param 		{Number} 		[$y=0] 		The y translate value
 * @param 		{Number} 		[$z=0] 		The z translate value
 *
 * @example
 * .my-cool-element {
 * 	\@include s-translate(50%, 20px);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out the style to truncate the text if needed
 *
 * @example 	scss
 * h1 {
 * 	\@include s-truncate-text();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Vertically align content by using the inline-block middle trick
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include s-vertical-aligner();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Hide an element only visually. This ensure that the element is still correctly displayed in the page for SEO
 * but will not being visible to the user
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include s-visually-hidden();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Get a registered color by name or wrap a new color into a s-color call
 * to manipulate it with ease.
 * Supported actions :
 * - hue {Deg}
 * - lighten {Percent}
 * - darken {Percent}
 * - saturate {Percent}
 * - desaturate {Percent}
 * - grayscale {Boolean}
 * - complement {Boolean}
 * - invert {Boolean}
 * - opacity {Percent}
 * - mix {Color}
 *
 * @param 		{String|Color} 		$color 				The color name or the color value to manipulate
 * @param 		{String|List} 			[$modifier=null] 	The color modifier to apply. Can be a registered modifier name or a modifier list
 * @return 		{Color} 									The actual color value
 *
 * @example 	 	scss
 * // default color (settings.colors.default)
 * $myColor : s-color(default);
 * // primary color (settings.colors.primary)
 * $primary : s-color(primary);
 * // manipulate
 * $primary-dark : s-color(primary, -darken 10%);
 * // registered modifier
 * $primary-light : s-color(primary, light);
 * // $name as list
 * $modified primary : s-color((primary, -darken 10%));
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the color in a modifier list
 * @param 			{List} 			$modifiers 		The modifiers list
 * @return 			{String} 						The color name
 *
 * @example
 * $my-color : s-color-modifier(outline primary); // => primary
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the css class selector for the current component setted by the [core/mixins/_s-component.scss] mixin
 * and build with the passed arguments.
 *
 * @param 			{String} 			[$element=null] 		The element name of the class selector | '&' if target the same element like `&s-component-selector("&", ) {}`
 * @param 			{String} 			[$modifier=null] 		The modifier name of the class selector
 * @param 			{String} 			[$state=null] 			The state name of the class selector
 * @return 			{String} 									The generated class selector
 *
 * @example
 * \@incluse s-component('my-component') {
 * 		// if settings.selector.method === 'BEM'
 * 		s-component-selector('item') // => '.my-component__item'
 * 		s-component-selector(null, 'red') // => '.my-component--red'
 * 		s-component-selector('coco',null,'active') // => '.my-component__coco--active'
 * }
 *
 * // if target the same element with & :
 * \@include s-component('my-component') {
 * 		s-component-selector(, red, , "color") {
 * 			&s-component-selector("&", , "active") {
 * 				// something here...
 * 			}
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the name of the top level component setted with the [../mixins/_s-component.scss] mixin
 *
 * @param 			{String} 			[$default=null] 		The name to return if no top component name exist
 * @return 			{String} 									The component name
 *
 * @example
 * s-component('hello') // => 'hello'
 * \@include s-component('my-component') {
 * 		s-component('hello') // => 'my-component'
 * 		\@include s-component('another-component') {
 * 			s-component('hello') // => 'my-component'
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>;
 */
/**
 * Convert a passed value to the wanted unit
 * The conversion between some units that depends on a font-size will take the settings.typography.font-size value as reference.
 *
 * Available conversions
 * - from px
 * 	- to em
 * 	- to rem
 * 	- to pt
 * 	- to %
 *
 * - from em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from pt
 * 	- to em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from rem
 * 	- to em
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * @param 			{Number} 		$value 			The value to convert
 * @param 			{String} 		$unit 			The unit in which to convert the value
 * @return 			{Number} 						The converted value
 *
 * @example
 * // if the settings.typography.font-size === 16px
 * s-convert(24px, rem) // 1.5rem
 * s-convert(3rem, pt) // 36pt
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Transform a dash notation value into a map
 * Dash notation value is : -key1 value1 -key2 value2
 *
 * @param 			{List} 			$dash 			The dash list notation to transform
 * @return 			{Map} 							The map generated
 *
 * @example
 * $dash : -hello world -coco universe
 * s-dash-to-map($dash);
 * // (
 * // 	hello : world,
 * // 	coco : universe
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to em
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The em converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to the closest even value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest even converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a filter as parameter and parse it to return the {Map} corresponding
 * The $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`
 *
 * @param 			{List}<String> 			$filter 			The registered filter name or the filter string to transform into map
 * @return 			{Map} 										The corresponding filter map properties
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * s-filter-map(myCoolFilter);
 * // {
 * // 	box-shadow : #000 0 0 10px,
 * // 	blur : 30px
 * // }
 *
 * // custom filter
 * s-filter-map(blur(10px));
 * // {
 * // 	blur : 10px
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a list with all the filters that are passed as argument
 * This will use the [./_s-filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 * @return 		{List} 										The converted filters list to use as css property
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		filter : s-filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		filter : s-filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the font-family string or a registered font
 *
 * @param 			{String} 		$name 		The name of the registered font
 * @return 			{String} 					The corresponding font-family property to set in your css
 *
 * @example
 * // register a font
 * \@include s-setup((
 * 		fonts : (
 * 			myCoolFont : (
 * 				font-family : 'Helvetica Neue',
 * 				font-weight : 'bold',
 * 				// etc...
 * 			),
 * 			// other fonts...
 * 		)
 * ));
 *
 * // apply the font
 * .my-cool-element {
 * 		font-family : s-font-family(myCoolFont);
 * 		// font-family : 'Helvetica Neue';
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the font {Map} that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String|Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * s-font(
 * 		$family : 'Helvetica Neue',
 * 		$size : 12px,
 * 		$wrap : norwap
 * );
 * // (
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : nowrap
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Check if the provided color is a registered one or not
 * @param 		{String} 		$color 		The color nane to check
 * @return 		{Boolean} 					True if exists, false if not
 */
/**
 * Return the specified or calculated value of the given stack and size
 * depending on the settings.sizes ratios stack
 *
 * @param 		{Map} 			$stack 			The stack from which to interpolate the value
 * @param 		{String} 		$size 			The size wanted (has to exist in the settings.sizes stack)
 * @return 		{Number} 						The $stack.$size value or the interpolated one depending on the settings.sizes ratios
 *
 * @example
 *
 * // settings.sizes
 * \@include s-setup((
 * 		sizes : (
 * 			small : 0.5,
 * 			default : 1, // default is ALWAYS 1
 * 			big : 1.5
 * 		)
 * ));
 *
 * $myStack : (
 * 		default : 3rem,
 * 		big : 6rem
 * )
 *
 * s-interpolate($myStack, big) // 6rem cause specified in the $myStack value
 * s-interpolate($myStack, small) // 1.5rem => calculated like : 3rem * 0.5 = 1.5rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Check if the passed value is of a certain type
 *
 * Here's the available types that you can check
 * - mixed => mean anything
 * - null
 * - url
 * - px
 * - pt
 * - rem
 * - em
 * - percent | %
 * - vw
 * - vh
 * - ex
 * - ch
 * - cm
 * - mm
 * - in
 * - pc
 * - s | second
 * - boolean | bool
 * - function
 * - number
 * - int | integer
 * - string
 * - color
 * - list
 * - map
 * - deg | degree
 * - list-{type} => check if is a list of the specified type
 * - map-{type} => check if is a map of the specified type
 *
 * @param 			{Mixed} 			$value 			The value to check
 * @param 			{String} 			$type 			The type to check
 * @return 			{Boolean} 							true if match the type, false if not
 *
 * @example
 * s-is(hello, string) // => true
 * s-is('hello', string) // => true
 * s-is(#fff, color) // => true
 * s-is(hello #fff, list-color) // => false
 * s-is(#fff #ddd, list-color) // => true
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Alias to the [./_s-look-and-feel.scss] function
 *
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : s-look-and-feel(padding-horizontal) s-look-and-feel(padding-vertical);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the modular scale value based on the settings ```modular-scale.base``` and ```modular-scale.ratio```.
 *
 * @param 			{Number} 		$scale 		The wanted scale
 * @param 			{Number} 		[$base=settings.modular-scale.base] 	The base of calculation
 * @return 			{Number} 					The calculated resulting value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to the closest odd value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest odd converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Parse a given string/list properties and return the Map corresponding to the Map description
 *
 * @param 				{List} 				$properties 			The properties to parse
 * @param 				{Map} 				$descriptor 			The descriptor map to use to parse the properties
 * @return 				{Map} 										The properties in map format
 *
 * @example
 * s-parse-properties(10px hello -delay 20s, (
 *  	myNumber : Number,
 *  	myOtherNumber : Number,
 *  	myString : String,
 *  	myCoolVar : String,
 *  	delay : second
 * ));
 * // => (
 * //  	myNumber : 10px,
 * // 	myString : hello,
 * // 	delay : 20s
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to %
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The % converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to pt
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The pt converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to px
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The px converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to rem
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The rem converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been even rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-render-round-even(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 84px
 * // 3. transform to passed unit value : 84px / 16px = 5.25rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been odd rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-render-round-odd(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round odd the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-render-round(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Search and replace tokens like colors #primary in a passed string, list or map
 * Supported tokens types :
 * 1. Colors : colorName
 *
 * @example
 * s-replace-tokens(12px #primary hello #secondary); // > 12px #ddd hello #fff;
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Process selector to avoid having --default, etc...
 * @param 		{String} 		$selector 		The selector to process
 * @return 		{String} 						The processed selector
 * @example 	scss
 * s-selector('.input--default'); // => .input
 * s-selector('.input-default'); // => .input
 * s-selector('.input.default'); // => .input
 */
/**
 * Get a settings from the global settings stack
 *
 * @param 				{String} 			$path 						The setting path wanted separated by dots
 * @param 				{String} 			[$context=s-context()] 		The context name to get the setting
 * @param 				{Mixed} 			[$default=null] 			The value to return if no value is found
 * @return 				{Mixed} 										The setting value¨
 *
 * @example
 * $font-size : s-setting('typography.font-size');
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a value interpolated from the settings.spaces stack
 *
 * @param 			{String} 			$size 			The space size wanted. Must exist in the settings.sizes stack
 * @return 			{Number} 							The actual space value
 *
 * @example
 * .my-cool-section {
 * 		padding : s-pace(big);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a number without any units
 *
 * @param 			{Number} 		$number 		The number to process
 * @return 			{Number} 						The number without units
 *
 * @example
 * s-strip-units(12px); // => 12
 * s-strip-units(30rem); // => 30
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Test an argument passed to a function or a mixin to ensure his type, value, etc...
 * If the argument does not pass the test, an error will be thrown, unless the $check-only argument is true
 *
 * @param 				{String} 				$method 				The function/mixin name (debug purpose)
 * @param 				{String} 				$argument 				The argument name to test (debug purpose)
 * @param 				{List|String} 			$type-or-values 		If string, the type(s) that the argument must match, if list, the possible values that the argument can take
 * @param 				{Mixed} 				$value 					The actual argument value
 * @param 				{Boolean} 				[$check-only=false]		If this is true, will not thrown any error
 * @return 				{Mixed} 										The value if ok, false if not
 *
 * @example
 * \@mixin my-cool-mixin($argument1, $argument2) {
 *        $argument1 : s-test-argument(my-cool-mixin, argument1, string, $argument1);
 *        $argument2 : s-test-argument(my-cool-mixin, argument2, (hello,world,12), $argument2);
 * }
 * \@mixin my-cool-mixin(hello, world); // ok
 * \@mixin my-cool-mixin(hello, universe); // throw an error
 * \@mixin my-cool-mixin(12, world); // throw an error
 *
 * @author 				Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the text-format setting scope class
 * @return 		{String} 		The text-format scope class from settings.text-format.scope-class
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a transition as parameter and parse it to return the {Map} corresponding
 * The $transition parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transition argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transition 			The registered transition name or the transition string to transform into map
 * @return 			{Map} 										The corresponding transition map properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * s-transition-map(fast);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out
 * // }
 *
 * // custom transition
 * s-transition-map(fast -delay .5s);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out,
 * // 	delay : .5s
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a transition as parameter and parse it to return the {List} corresponding
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		transition : s-transition(fast);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 *  	transition : s-transition(fast -delay .5s, fast width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the unit context if has been set by the [s-unit-context mixin](../mixins/_s-unit-context.scss)
 *
 * @return 		{String} 				The unit context setted
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the generated vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typography.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typography.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean|String} 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the vertical-rhythme setting scope class
 * @return 		{String} 		The vertical-rhythme scope class from settings.vertical-rhythme.scope-class
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generic sugar function can return multiple settings types like:
 * - any settings : s('settings.{path}')
 * - look and feel : s('look-and-feel.{property}', $size)
 *  	- s('lnf.{property}', $size)
 * - space : s('space.{size}')
 * - color : s('color.{name}', $modifier)
 * - transition : s('transition.{name}')
 * - filter : s('filter.{name}')
 *
 * @example
 * $my-color : s('color.primary');
 * $my-transition : s('transition.fast');
 * $my-font-size : s('settings.typography.font.size')
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out the animation property calculated with the passed arguments
 * This mixin support all the standard css animation properties like name, duration, delay, ease, direction and fill-mode.
 * The $animations argument will be parsed with the [../functions/_s-parse-properties.scss] function.
 * If you specify multiple animations at a time, this mixin will take care
 * of the delay calculation for each animations and make them play one after another
 *
 * @param 			{List} 				$animations 			The animations wanted like : coco .2s ease-in-out reverse
 *
 * @example
 * .my-cool-element {
 * 		@include s-animation(my-animation 1s ease-in-out, another-animation 4s);
 * 		// animation : my-animation 1s 0s ease-in-out 1 normal forwards, another-animation 4s 1s ease-in-out 1 normal forwards;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out all wanted registered classes like padding helpers, margin helpers, font helpers, etc...
 * Available namespaces
 * - sugar.filter.{name} : .fi-{name}
 * - sugar.transition.{name} : .tr-{name}
 * - sugar.font.family.{name} : .f-{name}
 * - sugar.margin.bottom.{size} : .m-b-{size}
 * - sugar.margin.top.{size} : .m-t-{size}
 * - sugar.margin.left.{size} : .m-l-{size}
 * - sugar.margin.right.{size} : .m-r-{size}
 * - sugar.margin.side.{size} : .m-s-{size}
 * - sugar.padding.all.{size} : .p-{size}
 * - sugar.padding.top.{size} : .p-t-{size}
 * - sugar.padding.bottom.{size} : .p-b-{size}
 * - sugar.padding.left.{size} : .p-l-{size}
 * - sugar.padding.right.{size} : .p-r-{size}
 * - sugar.padding.side.{size} : .p-s-{size}
 * - sugar.size.{size} : .s-{size}
 * - sugar.size.rel.{size} : .s-{size}-rel
 * - sugar.padding.no.top : .no-p-t
 * - sugar.padding.no.bottom : .no-p-b
 * - sugar.padding.no.left : .no-p-l
 * - sugar.padding.no.right : .no-p-r
 * - sugar.padding.no.side : .no-p-s
 * - sugar.margin.no.top : .no-m-t
 * - sugar.margin.no.bottom : .no-m-b
 * - sugar.margin.no.left : .no-m-l
 * - sugar.margin.no.right : .no-m-r
 * - sugar.margin.no.side : .no-m-s
 * - sugar.color.{name}.color` .c-{name}
 * - sugar.color.{name}.bkg : .bkg-{name}
 * - sugar.color.{name}.modifier.{mod-name}.color : .c-{name}--{mod-name}
 * - sugar.color.{name}.modifier.{mod-name}.bkg : .bkg-{name}--{mod-name}
 * - sugar.pull.left : .pull-left
 * - sugar.pull.right : .pull-right
 * - sugar.position.relative : .relative
 * - sugar.position.absolute : .absolute
 * - sugar.clear.left : .clear-left
 * - sugar.clear.right : .clear-right
 * - sugar.clear.both : .clear
 * - sugar.pointer.events.all : .pointer-events-all
 * - sugar.pointer.events.none : .pointer-events-none
 * - sugar.display.show : .show
 * - sugar.display.show-inline : .show-inline
 * - sugar.display.hidden : .hidden
 * - sugar.display.hide : .hide
 * - sugar.display.visible : .visible
 * - sugar.display.invisible : .invisible
 * - sugar.display.visually-hidden : .visually-hidden
 * - sugar.text.hidden : .t-hidden
 * - sugar.text.truncate : .t-truncate
 * - sugar.text.align.left : .t-left
 * - sugar.text.align.right : .t-right
 * - sugar.text.align.center : .t-center
 * - sugar.text.align.justify : .t-justify
 * - sugar.text.transform.lowercase : .t-lowercase
 * - sugar.text.transform.uppercase : .t-uppercase
 * - sugar.text.transform.capitalize : .t-capitalize
 * - sugar.font.weight.bold : .f-bold
 * - sugar.font.weight.lighter : .f-lighter
 * - sugar.font.weight.bolder : .f-bolder
 * - sugar.font.weight.normal : .f-normal
 * - sugar.font.style.italic : .f-italic
 * - sugar.font.style.oblique : .f-oblique
 * - sugar.font.variant.small-caps : .f-small-caps
 * - sugar.block.align.center : .block-center
 * - sugar.ratio.21-9 : ```.ratio-21-9```
 * - sugar.ratio.16-9 : ```.ratio-16-9```
 * - sugar.ratio.4-3 : ```.ratio-4-3```
 * - sugar.ratio.1-1 : ```.ratio-1-1```
 * - sugar.size.abs.cover : ```.abs-cover```
 * - sugar.size.abs.contain : ```.abs-contain```
 * - sugar.size.abs.fit : ```.abs-fit```
 * - sugar.clearfix.default : .clearfix
 * - sugar.clearfix.float : .clearfix-float
 * - sugar.clearfix.micro : .clearfix-micro
 * - sugar.clearfix.overflow : .clearfix-overflow
 * - sugar.clearfix.facebook : .clearfix-facebook
 * - sugar.no-transitions : .no-transitions
 * - sugar.clear-transitions : .clear-transitions
 * - sugar.no-animations : .no-animations
 * - sugar.clear-animations : .clear-animations
 * - sugar.no-transmations : .no-transmations
 * - sugar.clear-transmations : .clear-transmations
 *
 * @param 			{List}<string> 			$namespaces 		The classes namespaces wanted
 *
 * @example
 * \@include s-classes(); // will print out all the classes
 * \@include s-classes('sugar.font'); // will print all the font classes
 * \@include s-classes('sugar.clearfix' 'sugar.pull'); // the clearfixes and the pull classes
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out the scoped color schema css
 *
 * @param 		{String} 			$name 			The color schema name
 *
 * @example
 * \@include s-color-schema(light) {
 * 		h1, h2 {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1,
 * .cs-light h2 {
 * 		color : white;
 * }
 *
 * h1, h2 {
 * 		\@include s-color-schema(light) {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1, h1.cs-light,
 * .cs-light h2, h2.cs-light {
 * 		color : white;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the name of the component that will be handled inside the mixin
 *
 * @param 			{String} 			[$name=null] 			The name of the component to set
 * @param 			{String|Map} 		[$context=null] 		A context name or map to use inside the mixin
 *
 * @example
 * \@include s-component('my-component') {
 * 		s-component('hello') // => 'my-component'
 * 		\@include s-component('another-component') {
 * 			s-component('hello') // => 'my-component'
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>;
 */
/**
 * Register a context with a name to use it later
 *
 * @param 			{String} 		$name 			The context name
 * @param 			{Map} 			$settings 		The settings to override for this context
 *
 * @example
 * \@include s-context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // using your context
 * \@include s-context(my-cool-context) {
 * 		s-look-and-feel(padding-vertical); // => 0.6em
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set a context to be used inside the mixin
 *
 * @param 			{String|Map} 			$name-or-map 		The name of a registered context or a map
 *
 * @example
 * // register a context
 * \@include s-context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // registered context
 * \@include s-context(my-cool-context) {
 * 		// your code here...
 * }
 *
 * // inline context
 * \@include s-context((
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : .3em
 * 			)
 * 		)
 * )) {
 * 		// your code here...
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out a list with all the filters that are passed as argument
 * This will use the [../functions/_s-filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		\@include s-filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		\@include s-filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Helper to print a font-face
 *
 * @param 			{String} 		$font-family 			The font-family
 * @param 			{String} 		$src 					The source url (only 1 extension)
 * @param 			{List} 			[$extensions=woff2] 	The extensions list that you have available
 * @param 			{String} 		[$font-weight=normal] 	The font-weight property
 * @param 			{String} 		[$font-style=normal] 	The font-style property
 *
 * @example
 * // if you have these extensions files : .woff .eot .woff2
 * \@include s-font-face(
 * 		$name : my-cool-font,
 * 		$src : '/fonts/my-font.eot',
 * 		$extensions : eot woff woff2
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print all the fonts properties that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String|Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * .my-cool-elememt {
 * 		\@include s-font(
 * 			$family : 'Helvetica Neue',
 * 		 	$size : 12px,
 * 		  	$wrap : norwap
 *      );
 *      // print
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : nowrap
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Init the sugar toolkit.
 * This has to be called **AFTER** all the [./_s-setup.scss] mixin call
 * and **BEFORE** all the others sugar mixins and functions calls
 *
 * @example
 * \@include s-init();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Register all the dynamic helper classes that depends on the settings, etc...
 * This is used internaly
 *
 * @example
 * \@include s-init-classes();
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Register a helper class under a certain namespace
 *
 * @param 			{String} 		$classname 		The classname that will be printed out
 * @param 			{String} 		$namespace 		The dots separated namespace under which the class will live
 *
 * @example
 * \@include s-register-class(my-cool-class, 'my.cool.namespace') {
 * 		background : pink;
 * }
 * \@include s-register-class(another-cool-class, 'my.another.namespace') {
 * 		background : red;
 * }
 *
 * // print out my helpers classes
 * \@include s-classes('my');
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Setup sugar toolkit by overriding the default [settings](../_settings.scss)
 * This has to be called **BEFORE** the [s-init mixin](./_s-init.scss)
 *
 * @param 			{Map} 			$settings 		The settings to override
 *
 * @example
 * \@include s-setup((
 * 		typo : (
 * 			font-size : 12px
 * 		),
 * 		sizes : (
 * 			small : 0.5,
 * 			big : 1.5
 * 		)
 * ));
 * // this mixin can be called as many times as you need
 * // this allows you to separate your configs setup into multiple
 * // files...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Display the vertical rhythme
 *
 * @param 			{Color} 		The color wanted
 *
 * @example
 * body {
 * 		@include s-show-vertical-rhythme();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a transition as parameter and print the corresponding transition property
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		\@include s-transition(fast>);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 * 		\@include s-transition(fast -delay .5s, fase width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the unit context to use inside the mixin.
 * This mean that if you set a unit context, then get a number setting through the [s-setting function](../functions/_s-setting.scss),
 * The value that will be returned will be converted into the unit context if possible
 *
 * @param 			{String} 			$unit 			The unit wanted
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-setting('typography.font-size'); // => 16px
 * \@incluse s-unit-context(rem) {
 * 		s-setting('typography.font-size'); // => 1rem
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	s-vertical-rhythme
 * Print out the vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typography.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typography.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean|String} 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	Helper Classes
 * This file is responsible to register the static helper classes like:
 *
 * - sugar.pull.left : ```.pull-left```
 * - sugar.pull.right : ```.pull-right```
 * - sugar.position.relative : ```.relative```
 * - sugar.position.absolute : ```.absolute```
 * - sugar.clear.left : ```.clear-left```
 * - sugar.clear.right : ```.clear-right```
 * - sugar.clear.both : ```.clear```
 * - sugar.pointer.events.all : ```.pointer-events-all```
 * - sugar.pointer.events.none : ```.pointer-events-none```
 * - sugar.display.show : ```.show```
 * - sugar.display.show-inline : ```.show-inline```
 * - sugar.display.hidden : ```.hidden```
 * - sugar.display.hide : ```.hide```
 * - sugar.display.visible : ```.visible```
 * - sugar.display.invisible : ```.invisible```
 * - sugar.display.visually-hidden : ```.visually-hidden```
 * - sugar.text.hidden : ```.t-hidden```
 * - sugar.text.truncate : ```.t-truncate```
 * - sugar.text.align.left : ```.t-left```
 * - sugar.text.align.right : ```.t-right```
 * - sugar.text.align.center : ```.t-center```
 * - sugar.text.align.justify : ```.t-justify```
 * - sugar.text.transform.lowercase : ```.t-lowercase```
 * - sugar.text.transform.uppercase : ```.t-uppercase```
 * - sugar.text.transform.capitalize : ```.t-capitalize```
 * - sugar.font.weight.bold : ```.f-bold```
 * - sugar.font.weight.lighter : ```.f-lighter```
 * - sugar.font.weight.bolder : ```.f-bolder```
 * - sugar.font.weight.normal : ```.f-normal```
 * - sugar.font.style.italic : ```.f-italic```
 * - sugar.font.style.oblique : ```.f-oblique```
 * - sugar.font.variant.small-caps : ```.f-small-caps```
 * - sugar.block.align.center : ```.block-center```
 * - sugar.ratio.21-9 : ```.ratio-21-9```
 * - sugar.ratio.16-9 : ```.ratio-16-9```
 * - sugar.ratio.4-3 : ```.ratio-4-3```
 * - sugar.ratio.1-1 : ```.ratio-1-1```
 * - sugar.size.abs.cover : ```.abs-cover```
 * - sugar.size.abs.contain : ```.abs-contain```
 * - sugar.size.abs.fit : ```.abs-fit```
 * - sugar.clearfix.default : ```.clearfix```
 * - sugar.clearfix.float : ```.clearfix-float```
 * - sugar.clearfix.micro : ```.clearfix-micro```
 * - sugar.clearfix.overflow : ```.clearfix-overflow```
 * - sugar.clearfix.facebook : ```.clearfix-facebook```
 * - sugar.no-transitions : ```.no-transitions```
 * - sugar.clear-transitions : ```.clear-transitions```
 * - sugar.no-animations : ```.no-animations```
 * - sugar.clear-animations : ```.clear-animations```
 * - sugar.no-transmations : ```.no-transmations```
 * - sugar.clear-transmations : ```.clear-transmations```
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
#template-stack .pull-left {
  /**
	 * @name 		```.pull-left```
	 * Allows you to pull an element to the left side
	 * @styleguide 	Helpers / Pull
	 * @example 	html
	 * 	<span class="pull-left">Hello world</span>
	 * </div>
	 */
  float: left;
}

#template-stack .pull-right {
  /**
	 * @name 		```.pull-right```
	 * Allows you to pull an element to the right side
	 * @styleguide 	Helpers / Pull
	 * @example 	html
	 * 	<span class="pull-right">Hello world</span>
	 * </div>
	 */
  float: right;
}

#template-stack .relative {
  /**
	 * @name 		```.relative```
	 * Set an element position as ```relative```
	 * @styleguide 	Helpers / Position
	 * @example 	html
	 * <div class="relative">
	 * 	I'm relative now
	 * </div>
	 */
  position: relative;
}

#template-stack .absolute {
  /**
	 * @name 		```.absolute```
	 * Set an element position as ```absolute```
	 * @styleguide 	Helpers / Position
	 * @example 	html
	 * <div class="absolute">
	 * 	I'm absolute now
	 * </div>
	 */
  position: absolute;
}

#template-stack .clear-left {
  /**
	 * @name 		```.clear-left```
	 * Clear the left float on the element
	 * @styleguide 	Helpers / Float
	 * @example 	html
	 * <div class="clear-left">
	 * 	I clear the left float
	 * </div>
	 */
  clear: left;
}

#template-stack .clear-right {
  /**
	 * @name 		```.clear-right```
	 * Clear the right float on the element
	 * @styleguide 	Helpers / Float
	 * @example 	html
	 * <div class="clear-right">
	 * 	I clear the right float
	 * </div>
	 */
  clear: right;
}

#template-stack .clear {
  /**
	 * @name 		```.clear```
	 * Clear both float on the element
	 * @styleguide 	Helpers / Float
	 * @example 	html
	 * <div class="clear">
	 * 	I clear both floats
	 * </div>
	 */
  clear: both;
}

#template-stack .pointer-events-none {
  /**
	 * @name 		```.pointer-events-none```
	 * Disable any pointer events
	 * @styleguide 	Helpers / Pointer events
	 * @example 	html
	 * <div class="pointer-events-none">
	 * 	I will not react to any pointer events
	 * </div>
	 */
  pointer-events: none;
}

#template-stack .pointer-events-all {
  /**
	 * @name 		```.pointer-events-all```
	 * Disable any pointer events
	 * @styleguide 	Helpers / Pointer events
	 * @example 	html
	 * <div class="pointer-events-all">
	 * 	I will not react to any pointer events
	 * </div>
	 */
  pointer-events: all;
}

#template-stack .block {
  /**
	 * @name 		```.block```
	 * Display the element as ```block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="block">
	 * 	I'm displayed as block
	 * </div>
	 */
  display: block;
}

#template-stack .inline {
  /**
	 * @name 		```.inline```
	 * Display the element as ```inline```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="inline">
	 * 	I'm displayed as inline
	 * </div>
	 */
  display: inline;
}

#template-stack .inline-block {
  /**
	 * @name 		```.inline-block```
	 * Display the element as ```inline-block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="inline-block">
	 * 	I'm displayed as inline-block
	 * </div>
	 */
  display: inline-block;
}

#template-stack .show {
  /**
	 * @name 		```.show```
	 * Display the element as ```block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="show">
	 * 	I'm displayed
	 * </div>
	 */
  display: block;
}

#template-stack .show-inline {
  /**
	 * @name 		```.show-inline```
	 * Display the element as ```inline-block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="show-inline">
	 * 	I'm inline displayed
	 * </div>
	 */
  display: inline-block;
}

#template-stack .hidden {
  /**
	 * @name 		```.hidden```
	 * Hide the element by setting the display to ```none```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="hidden">
	 * 	I'm hidden
	 * </div>
	 */
  display: none;
}

#template-stack .hide {
  /**
	 * @name 		```.hide```
	 * Hide the element by setting the display to ```none```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="hide">
	 * 	I'm hidden
	 * </div>
	 */
  display: none;
}

#template-stack .visible {
  /**
	 * @name 		```.visible```
	 * Display the element by setting the visibility to ```visible```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="visible">
	 * 	I'm visible
	 * </div>
	 */
  visibility: visible;
}

#template-stack .invisible {
  /**
	 * @name 		```.invisible```
	 * Display the element by setting the visibility to ```hidden```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="invisible">
	 * 	I'm invisible
	 * </div>
	 */
  visibility: hidden;
}

#template-stack .visually-hidden {
  /**
	 * @name 		```.visually-hidden```
	 * Hide the element from display but not for SEO.
	 * This class use some tricks to make the element dissapear without using some ```display:none;```, etc...
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="visually-hidden">
	 * 	I'm only visually hidden
	 * </div>
	 */
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

#template-stack .t-hidden {
  /**
	 * @name 		```.t-hidden```
	 * Hide the text
	 * @styleguide 	Helpers / Text
	 * @example 	html
	 * <div class="t-hidden">
	 * 	I'm not visible
	 * </div>
	 */
  overflow: hidden;
  text-indent: -9000px;
  display: block;
}

#template-stack .t-truncate {
  /**
	 * @name 		```.t-truncate```
	 * Hide the text
	 * @styleguide 	Helpers / Text
	 * @example 	html
	 * <div class="t-truncate">
	 * 	I'm truncated cause I talk a lot too much Nulla mauris eros, finibus ac faucibus et, tempus quis risus. Praesent sit amet nulla vel libero euismod sodales eu nec.
	 * </div>
	 */
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

#template-stack .t-truncate > * {
  text-overflow: ellipsis;
  overflow: hidden;
}

#template-stack .t-left {
  /**
	 * @name 		```.t-left```
	 * Align the text to the left
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-left">
	 * 	I'm left aligned
	 * </div>
	 */
  text-align: left;
}

#template-stack .t-right {
  /**
	 * @name 		```.t-right```
	 * Align the text to the right
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-right">
	 * 	I'm right aligned
	 * </div>
	 */
  text-align: right;
}

#template-stack .t-center {
  /**
	 * @name 		```.t-center```
	 * Align the text to the center
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-center">
	 * 	I'm centered
	 * </div>
	 */
  text-align: center;
}

#template-stack .t-justify {
  /**
	 * @name 		```.t-justify```
	 * Make the text justified
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-justify">
	 * 	Nullam vel feugiat nunc. Phasellus facilisis, nisi sit amet viverra rhoncus, arcu risus volutpat dolor, sed euismod magna tellus ac purus. Praesent augue lorem, ullamcorper ac accumsan nec, suscipit eu.
	 * </div>
	 */
  text-align: justify;
}

#template-stack .t-lowercase {
  /**
	 * @name 		```.t-lowercase```
	 * Transform the text to lowercase
	 * @styleguide 	Helpers / Text Transform
	 * @example 	html
	 * <div class="t-lowercase">
	 * 	I'M LOWERCASE
	 * </div>
	 */
  text-transform: lowercase;
}

#template-stack .t-uppercase {
  /**
	 * @name 		```.t-uppercase```
	 * Transform the text to uppercase
	 * @styleguide 	Helpers / Text Transform
	 * @example 	html
	 * <div class="t-uppercase">
	 * 	I'm uppercase
	 * </div>
	 */
  text-transform: uppercase;
}

#template-stack .t-capitalize {
  /**
	 * @name 		```.t-capitalize```
	 * Capizalize the words
	 * @styleguide 	Helpers / Text Transform
	 * @example 	html
	 * <div class="t-capitalize">
	 * 	I'm capitalized
	 * </div>
	 */
  text-transform: capitalize;
}

#template-stack .f-bold {
  /**
	 * @name 		```.f-bold```
	 * Set the font-weight to ```bold```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * This <span class="f-bold">word</span> is bold
	 */
  font-weight: bold;
}

#template-stack .f-lighter {
  /**
	 * @name 		```.f-lighter```
	 * Set the font-weight to ```lighter```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * 	This <span class="f-lighter">word</span> is lighter
	 */
  font-weight: lighter;
}

#template-stack .f-bolder {
  /**
	 * @name 		```.f-bolder```
	 * Set the font-weight to ```bolder```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * This <span class="f-bolder">word</span> is bolder
	 */
  font-weight: bolder;
}

#template-stack .f-normal {
  /**
	 * @name 		```.f-normal```
	 * Set the font-weight to ```normal```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * <div class="f-bold">
	 * 	This <span class="f-normal">word</span> is normal
	 * </div>
	 */
  font-weight: normal;
  font-style: normal;
}

#template-stack .f-italic {
  /**
	 * @name 		```.f-italic```
	 * Set the font-style to ```italic```
	 * @styleguide 	Helpers / Font
	 * @example 	html
	 * This <span class="f-italic">word</span> is italic
	 */
  font-style: italic;
}

#template-stack .f-oblique {
  /**
	 * @name 		```.f-oblique```
	 * Set the font-style to ```oblique```
	 * @styleguide 	Helpers / Font Style
	 * @example 	html
	 * This <span class="f-oblique">word</span> is oblique
	 */
  font-style: oblique;
}

#template-stack .f-small-caps {
  /**
	 * @name 		```.f-small-caps```
	 * Set the font-variant to ```small-caps```
	 * @styleguide 	Helpers / Font Variant
	 * @example 	html
	 * This <span class="f-small-caps">word</span> is small-caps
	 */
  font-variant: small-caps;
}

#template-stack .block-center {
  /**
	 * @name 		```.block-center```
	 * Set the element to as ```display:block``` and center it
	 * @styleguide 	Helpers / Block
	 * @example 	html
	 * <div class="block-center bkg-primary" style="width:100px;">
	 * 	I'm a centered block
	 * </div>
	 */
  display: block;
  margin-left: auto;
  margin-right: auto;
}

#template-stack .abs-cover {
  /**
	 * @name 		```.abs-cover```
	 * Set a size that will cover the entire parent surface by positionning it in absolute
	 * @styleguide 	Helpers / Sizes
	 * @example 	html
	 * <div class="ratio-16-9">
	 * 	<img src="https://source.unsplash.com/random" class="abs-cover" />
	 * </div>
	 */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  min-width: 100%;
  min-height: 100%;
}

#template-stack .abs-contain {
  /**
	 * @name 		```.abs-contain```
	 * Set a size that will contain the entire parent surface by positionning it in absolute
	 * @styleguide 	Helpers / Sizes
	 * @example 	html
	 * <div class="ratio-16-9">
	 * 	<img src="https://source.unsplash.com/random" class="abs-contain" />
	 * </div>
	 */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  max-width: 100%;
  max-height: 100%;
}

#template-stack .abs-fit {
  /**
	 * @name 		```.abs-fit```
	 * Set a size that will fit the entire parent surface by positionning it in absolute
	 * @styleguide 	Helpers / Sizes
	 * @example 	html
	 * <div class="ratio-16-9">
	 * 	<img src="https://source.unsplash.com/random" class="abs-fit" />
	 * </div>
	 */
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

#template-stack .clearfix {
  /**
	 * @name 		```.clearfix```
	 * Apply the micro clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

#template-stack .clearfix-float {
  /**
	 * @name 		```.clearfix-float```
	 * Apply the float clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix-float bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

#template-stack .clearfix, #template-stack .clearfix-micro {
  /**
	 * @name 		```.clearfix```
	 * Apply the micro clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

#template-stack .clearfix-overflow {
  /**
	 * @name 		```.clearfix-overflow```
	 * Apply the overflow clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix-overflow bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

#template-stack .clearfix-facebook {
  /**
	 * @name 		```.clearfix-facebook```
	 * Apply the facebook clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix-facebook bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

#template-stack .ratio-21-9 {
  /**
	 * @name 		```.ratio-21-9```
	 * Keep a 16/9 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 16 * 9
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-21-9"></div>
	 */
  position: relative;
  overflow: hidden;
}

#template-stack .ratio-21-9:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 42.85714%;
}

#template-stack .ratio-16-9 {
  /**
	 * @name 		```.ratio-16-9```
	 * Keep a 16/9 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 16 * 9
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-16-9"></div>
	 */
  position: relative;
  overflow: hidden;
}

#template-stack .ratio-16-9:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 56.25%;
}

#template-stack .ratio-4-3 {
  /**
	 * @name 		```.ratio-4-3```
	 * Keep a 4/3 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 4 * 3
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-4-3"></div>
	 */
  position: relative;
  overflow: hidden;
}

#template-stack .ratio-4-3:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 75%;
}

#template-stack .ratio-1-1 {
  /**
	 * @name 		```.ratio-1-1```
	 * Keep a 1/1 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100%
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-1-1"></div>
	 */
  position: relative;
  overflow: hidden;
}

#template-stack .ratio-1-1:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 100%;
}

#template-stack .no-transitions {
  /**
	 * @name 		```.no-transitions```
	 * Disable the transitions <span class="f-bold">only on the element</span>
	 * @styleguide 	Helpers / Transitions
	 * @example 	html
	 * <div class="no-transitions">
	 * 	I have no more transitions
	 * 	<div>But I have</div>
	 * </div>
	 */
}

#template-stack .no-transitions, #template-stack .no-transitions:before, #template-stack .no-transitions:after {
  transition: none !important;
}

#template-stack .clear-transitions {
  /**
	 * @name 		```.clear-transitions```
	 * Disable the transitions <span class="f-bold">on the element and all his children</span>
	 * @styleguide 	Helpers / Transitions
	 * @example 	html
	 * <div class="clear-transitions">
	 * 	I have no more transitions
	 * 	<div>Me neither</div>
	 * </div>
	 */
}

#template-stack .clear-transitions, #template-stack .clear-transitions:before, #template-stack .clear-transitions:after, #template-stack .clear-transitions *, #template-stack .clear-transitions *:before, #template-stack .clear-transitions *:after {
  transition: none !important;
}

#template-stack .no-animations {
  /**
	 * @name 		```.no-animations```
	 * Disable the animations <span class="f-bold">only on the element</span>
	 * @styleguide 	Helpers / Animations
	 * @example 	html
	 * <div class="no-animations">
	 * 	I have no more animations
	 * 	<div>But I have</div>
	 * </div>
	 */
}

#template-stack .no-animations, #template-stack .no-animations:before, #template-stack .no-animations:after {
  animation: none !important;
}

#template-stack .clear-animations {
  /**
	 * @name 		```.clear-animations```
	 * Disable the transitions <span class="f-bold">on the element and all his children</span>
	 * @styleguide 	Helpers / Animations
	 * @example 	html
	 * <div class="clear-animations">
	 * 	I have no more animations
	 * 	<div>Me neither</div>
	 * </div>
	 */
}

#template-stack .clear-animations, #template-stack .clear-animations:before, #template-stack .clear-animations:after, #template-stack .clear-animations *, #template-stack .clear-animations *:before, #template-stack .clear-animations *:after {
  animation: none !important;
}

#template-stack .no-transmations {
  /**
	 * @name 		```.no-transmations```
	 * Disable the animations and transitions <span class="f-bold">only on the element</span>
	 * @styleguide 	Helpers / Transmations
	 * @example 	html
	 * <div class="no-transmations">
	 * 	I have no more animations or transitions
	 * 	<div>But I have</div>
	 * </div>
	 */
}

#template-stack .no-transmations, #template-stack .no-transmations:before, #template-stack .no-transmations:after {
  transition: none !important;
  animation: none !important;
}

#template-stack .clear-transmations {
  /**
	 * @name 		```.clear-transmations```
	 * Disable the animations and transitions <span class="f-bold">on the element and all his children</span>
	 * @styleguide 	Helpers / Transmations
	 * @example 	html
	 * <div class="clear-transmations">
	 * 	I have no more animations or transitions
	 * 	<div>Me neither</div>
	 * </div>
	 */
}

#template-stack .clear-transmations, #template-stack .clear-transmations:before, #template-stack .clear-transmations:after, #template-stack .clear-transmations *, #template-stack .clear-transmations *:before, #template-stack .clear-transmations *:after {
  transition: none !important;
  animation: none !important;
}

/**
 * This file contains all the default settings that can be overrided by the [s-setup mixin](./mixins/_s-setup.scss).
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Create an arrow bubble effect
 *
 * @param 		{String} 			[$side=bottom] 				The side (top,right,bottom,left)
 * @param 		{String} 			[$align=center] 			The alignement (left,center,right,top,middle,bottom)
 * @param 		{Number} 			[$size=10px] 				The size of the arrow
 * @param 		{Color} 			[$color=s-color(primary)] 	The color of the bubble
 * @param 		{Number} 			[$arrow-offset=10px] 		The arrow offset from the side of the bubble
 * @param 		{Number} 			[$border-width=0] 			The border width of the bubble
 * @param 		{Color} 			[$border-color=null] 		The border color of the bubble
 *
 * @example
 * .my-cool-bubble {
 * 		\@include s-bubble(
 * 			$color : s-color(secondary)
 * 		);
 * 		color : white;
 * }
 *
 * @see 			https://codepen.io/kirkas/pen/otqyJ
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a drop shadow depending on the depth specified
 *
 * @param 		{Integer} 			$depth 							The depth wanted (1,2,3,4,etc...)
 * @param 		{Color} 			[$color=rgba(0,0,0,.2)] 		The drop shadow color
 *
 * @example
 * .my-cool-element {
 * 		\@include s-depth(2);
 * }
 *
 * @author 	 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Create a poping dot effect to catch user attention on a particular item
 * This mixin affect the :before and :after pseudo selector of the item
 *
 * @param 		{String} 		[$vertical-align=top] 			Where to put the dot verticaly (top,middle,bottom)
 * @param 		{String} 		[$align=left] 					Where to put the dot horizontaly (left,center,right)
 * @param 		{Number} 		[$size=20px] 					The size of the dot
 * @param 		{Color} 		[$color=primary] 				The color of the dot
 * @param 		{Number} 		[$offset-top=0] 				The offset top
 * @param 		{Number} 		[$offset-right=0] 				The offset right
 * @param 		{Number} 		[$offset-bottom=0] 				The offset bottom
 * @param 		{Number} 		[$offset-left=0] 				The offset left
 *
 * @example
 * .my-cool-element {
 * 		\@include s-hey(
 * 			$align : right,
 * 			$color : secondary,
 * 			$size : 10px,
 * 			$offset-top : -10px,
 * 			$offset-right : -10px
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, bars loader
 *
 * @param 			{String} 			[$shape=rect] 				The shape of the bars (rect,circle)
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$width=.5em] 				The width of each bars
 * @param 			{Number} 			[$height=2em] 				The height of each bars
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$gap=.5em] 				The gap between each bars
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param 			{Number} 			[$a-offset=null] 			The offset to move the animated bar
 * @param 			{String} 			[$a-direction=both] 		The direction in which to move the bars (up,down,both)
 * @param 			{Boolean} 			[$a-continuous=true] 		If true, the first bars will be animated at same time at the last ones
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-bars(
 * 			$color : primary,
 * 			$a-offset : .5em
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, circle loader
 *
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$size=.33em] 				The size of each dot
 * @param 			{Number} 			[$radius=1em] 				The distance of each dot from the center of the loader
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 *
 * @TODO finish documentation
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, couch-potato style loader
 *
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 * @param 		{Degree}		[$a-rotate=360deg] 			The animation rotation
 * @param 		{Number} 		[$a-scale=.7] 				The animation scale
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-couch-potato();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, flip ball style loader
 *
 * @param 		{String} 		[$shape=circle] 			The shape of the loader (circle,rect)
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader. Can be a list of colors
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-flip-ball();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a long shadow effect like [this](https://www.google.ch/search?q=long+shadow&espv=2&biw=2560&bih=1316&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjjne6x49LPAhVBHRQKHat8AW8Q_AUIBigB)
 *
 * @param 		{Color} 		[$color=rgba(0,0,0,.3)] 			The shadow color
 * @param 		{String} 		[$type=text] 						The shadow type (text,box)
 * @param 		{Degree} 		[$angle=135deg] 					The shadow angle
 * @param 		{Integer} 		[$depth=20] 						The shadow depth
 * @param 		{Boolean} 		[$fade=false] 						If true, the shadow will fade itself
 * @param 		{Number} 		[$blur=0] 							The blur amount of the shadow
 * @param 		{Number} 		[$blur-ratio=0] 					The ratio to blur each depth more
 *
 * @example
 * .my-cool-title {
 * 		\@include s-long-shadow(
 * 			$depth : 10
 * 		);
 * }
 * .my-cool-box {
 * 		\@include s-long-shadow(
 * 			$type : box
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Create side lines around an item
 *
 * @param 			{String} 		[$style=solid] 			The line style, same possible values as the border-style property
 * @param 			{String} 		[$side=both] 			The side where to put lines (left,right,both)
 * @param 			{Number} 		[$height=1px] 			The lines height
 * @param 			{Number} 		[$width=50%] 			The width of the lines
 * @param 			{Color} 		[$color=text]			The color of the lines
 * @param 			{Number} 		[$padding=0] 			The padding between the lines and the content
 * @param 			{Number} 		[$offset-top=null] 		The line offset top
 *
 * @example
 * h1 {
 * 		\@include s-side-lined(
 * 			$padding : 20px,
 * 			$side : right,
 * 			$width : 100%
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SAnimationComponent Classes
 * This file provide the mixins to generate animation classes
 */
/**
 * Provide the classes for the anim="letters-in-reveal" animation
 * - ```[anim="letters-in-reveal"]```
 * @param 		{Integer} 		[$words-letters-count=100] 		The max letters count of words that the animation will handle
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the anim="letters-in-reveal" classes
 * - ```[anim="letters-in-reveal"]```
 * @param 		{Integer} 		[$words-letters-count=100] 		The max letters count of words that the animation will handle
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the anim="letters-in-reveal" classes
 * - ```[anim="letters-in-reveal"]```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SAnimationComponent Classes
 * This file provide the mixins to generate animation classes
 */
/**
 * Provide the classes for the anim="lines-in-boxes" animation
 * - ```[anim="lines-in-boxes"]```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@keyframes lines-in-boxes {
  0% {
    width: 0;
    transform: translateX(200vw);
  }
  49.99999% {
    transform: translateX(200vw);
  }
  50% {
    width: 100%;
    left: 0;
    transform: translateX(0);
  }
  100% {
    width: 0;
    left: 100%;
    transform: translateX(0);
  }
}

@keyframes lines-in-boxes-hover {
  0% {
    width: 0;
    transform: translateX(200vw);
  }
  49.99999% {
    transform: translateX(200vw);
  }
  50% {
    width: 100%;
    left: 0;
    transform: translateX(0);
  }
  80% {
    width: 0;
    left: 100%;
    transform: translateX(0);
  }
  100% {
    width: 0;
    left: 100%;
    transform: translateX(0);
  }
}

@keyframes lines-in-boxes-text {
  0% {
    transform: translateX(-200vw);
  }
  49.99999% {
    transform: translateX(-200vw);
  }
  50% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(0);
  }
}

/**
* Provide the bare styling for the anim="lines-in-boxes" classes
* - ```[anim="lines-in-boxes"]```
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Provide the style styling for the anim="lines-in-boxes" classes
* - ```[anim="lines-in-boxes"]```
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
 * @name 	SAnimationComponent Classes
 * This file provide the mixins to generate animation classes
 */
/**
 * Provide the classes for the anim="slide-in" animation
 * - ```[anim="slide-in-up"]```
 * - ```[anim="slide-in-right"]```
 * - ```[anim="slide-in-bottom"]```
 * - ```[anim="slide-in-left"]```
 * @param 	{List} 		[$directions=up right down left]		Specify the directions to generate the classes for
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the anim="slide-in" classes
 * - ```[anim="slide-in-up"]```
 * - ```[anim="slide-in-right"]```
 * - ```[anim="slide-in-bottom"]```
 * - ```[anim="slide-in-left"]```
 * @param 	{List} 		[$directions=up right down left]		Specify the directions to generate the classes for
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
 * Provide the style styling for the anim="slide-in" classes
 * - ```[anim="slide-in"]```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SButtonComponent
 * Provide ability to generate buttons that follow your settings like colors, look and feel, etc...
 *
 * - ```.btn```
 * - ```.btn--block```
 * - ```.btn--{color}```
 * - ```.btn--outline```
 * - ```.btn--link```
 * - ```.btn:disabled```
 * - ```.btn--hover-{$color}```
 *
 * See:
 * - [Element level mixins API](./sass/_main.md)
 * - [Classes level mixins API](./sass/_classes.md)
 *
 * @example 	scss
 * // apply the button bare and style to my custom element
 * .my-cool-element {
 * 	\@include s-button();
 * }
 * // apply only the bare styling to my custom element
 * .my-cool-element {
 * 	\@include s-button-bare();
 * }
 * // apply only the style styling to my custom element
 * .my-cool-element {
 * 	\@include s-button-style();
 * }

 * // will print out classes for the button including bare and style part
 * \@include s-button-classes(
 * 	$colors : default primary secondary
 * );
 * // will print out classes for the button including only bare part
 * \@include s-button-classes-bare();
 * // will print out classes for the button including only style part
 * \@include s-button-classes-style(
 * 	$colors : default primary secondary
 * );
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SButtonComponent
 * This file provide the mixins to create buttons
 */
button {
  line-height: 1;
}

/**
 * Apply the button css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the button bare css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the button style css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SButtonComponent Classes
 * This file provide the mixins to generate button classes
 */
/**
 * Provide all the classes of the button component like .btn, .btn--outline, etc...
 * - ```.btn```
 * - ```.btn--{color}```
 * - ```.btn--outline```
 * - ```.btn--link```
 * - ```.btn--block```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the buttons classes
 * - ```.btn```
 * - ```.btn--block```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the buttons classes
 * - ```.btn--{color}```
 * - ```.btn--outline```
 * - ```.btn--link```
 * - ```.btn:disabled```
 * - ```.btn--hover-{$color}```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SCornerBadgeComponent
 * Provide ability to generate corner badges that follow your settings like colors.
 *
 * - ```.corner-badge```
 * - ```.corner-badge--tl```
 * - ```.corner-badge--tr```
 * - ```.corner-badge--bl```
 * - ```.corner-badge--br```
 * - ```.corner-badge--{color}```
 *
 * See:
 * - [Element level mixins API](./sass/_main.md)
 * - [Classes level mixins API](./sass/_classes.md)
 *
 * @example 	scss
 * // apply the corner badge bare and style to my custom element
 * .my-cool-element {
 * 	\@include s-corner-badge(primary tr);
 * }
 * // apply only the bare styling to my custom element
 * .my-cool-element {
 * 	\@include s-corner-badge-bare(tr);
 * }
 * // apply only the style styling to my custom element
 * .my-cool-element {
 * 	\@include s-corner-badge-style(primary);
 * }

 * // will print out classes for the corner badges including bare and style part
 * \@include s-corner-badge-classes(
 * 	$corners : tr tl br bl,
 * 	$colors : default primary secondary
 * );
 * // will print out classes for the button including only bare part
 * \@include s-button-classes-bare(
 * 	$corners : tr tl br bl
 * );
 * // will print out classes for the button including only style part
 * \@include s-button-classes-style(
 * 	$colors : default primary secondary
 * );
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SCornerBadgeComponent
 * This file provide the mixins to create corner badges
 */
/**
 * Apply the corner badge css
 * @param 		{Number} 		[$modifiers=default tr] 			The modifiers that represent the corner badge you want. Available : {color} tl tr bl br
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the corner badge bare css
 * @param 		{Number} 		[$modifiers=tr] 			The modifiers that represent the corner badge you want. Available : tl tr bl br
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the corner badge style css
 * @param 		{Number} 		[$modifiers=default] 			The modifiers that represent the corner badge you want. Available : {color}
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SCornerBadgeComponent Classes
 * This file provide the mixins to generate corner badge classes
 */
/**
 * Provide all the classes of the corner badge component like:
 * - ```.corner-badge```
 * - ```.corner-badge--tl```
 * - ```.corner-badge--tr```
 * - ```.corner-badge--bl```
 * - ```.corner-badge--br```
 * - ```.corner-badge--{color}```
 *
 * @param 		{List<String>} 		[$corners=tl tr bl br] 						The corners to generate
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide all the bare classes of the corner badge component like:
 * - ```.corner-badge```
 * - ```.corner-badge--tl```
 * - ```.corner-badge--tr```
 * - ```.corner-badge--bl```
 * - ```.corner-badge--br```
 *
 * @param 		{List<String>} 		[$corners=tl tr bl br] 						The corners to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide all the style classes of the corner badge component like:
 * - ```.corner-badge--{color}```
 *
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SDropdownComponent
 * Documentation coming soon...
 */
/**
 * @name 	SFormComponent
 * Documentation coming soon...
 */
/**
 * @name 	SFormComponent
 * This file provide the mixins and functions to create form elements
 */
#template-stack .ts-select, #template-stack .ts-select .ts-select__search-field {
  display: inline-block;
  -webkit-appearance: none;
  -moz-appearance: none;
  border: none;
  outline: none;
  width: 100%;
  font-size: 1em;
}

#template-stack .ts-select, #template-stack select[is="ts-select"][color="default"] + .ts-select, #template-stack select[is="ts-select"][color="primary"] + .ts-select,
#template-stack .ts-select--primary, #template-stack select[is="ts-select"][color="secondary"] + .ts-select,
#template-stack .ts-select--secondary {
  border-width: 1px;
  border-style: solid;
}

#template-stack .ts-select:disabled, #template-stack select[is="ts-select"][color="default"] + .ts-select:disabled, #template-stack select[is="ts-select"][color="primary"] + .ts-select:disabled,
#template-stack .ts-select--primary:disabled, #template-stack select[is="ts-select"][color="secondary"] + .ts-select:disabled,
#template-stack .ts-select--secondary:disabled {
  cursor: not-allowed;
}

/**
 * Set the styling for field sizes like padding, height, etc...
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the styling for field color like borders
 * @param 		{Color} 		$color 		The color wanted for the field
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the bare and style css for input field (text, email, etc...)
 * @param 		{Color} 		[$color=default] 		The color wanted for the field
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the bare css for input field (text, email, etc...)
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the style css for input field (text, email, etc...)
 * @param 		{Color} 		[$color=default] 		The color wanted for the field
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the bare and style css for textarea
 * @param 		{Color} 		[$color=default] 		The color wanted for the textarea
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the styling for textarea sizes like padding, etc...
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the bare css for textarea
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the style css for textarea
 * @param 		{Color} 		[$color=default] 		The color wanted for the textarea
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
* Apply the bare and style css for select
* @param 		{Color} 		[$color=default] 		The color wanted for the select
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
 * Set the styling for select colors like background arrow, etc...
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
* Apply the bare css for select
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Apply the style css for select
* @param 		{Color} 		[$color=default] 		The color wanted for the select
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Apply the bare and style css for form group
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Apply the bare css for form group
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Apply the style css for form group
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Apply the bare and style css for form addon
* @param 		{Color} 		[$color=default] 		The color wanted for the form addon
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Apply the bare css for form group
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
* Apply the bare and style css for form group
* @param 		{Color} 		[$color=default] 		The color wanted for the select
* @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
/**
 * @name 	SFormComponent Classes
 * This file provide the mixins to generate form classes
 */
/**
 * Provide all the classes of the form component like .form-input, .form-textarea, etc...
 * - ```.form-input```
 * - ```.form-input--{color}```
 * - ```.form-textarea```
 * - ```.form-textarea--{color}```
 * - ```.form-select```
 * - ```.form-select--{color}```
 * - ```.form-group````
 * - ```.form-addon```
 * - ```.form-addon--{color}```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide all the bare classes of the form component like .form-input, .form-textarea, etc...
 * - ```.form-input```
 * - ```.form-textarea```
 * - ```.form-select```
 * - ```.form-group````
 * - ```.form-addon```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide all the style classes of the form component like .form-input, .form-textarea, etc...
 * - ```.form-input```
 * - ```.form-input--{color}```
 * - ```.form-textarea```
 * - ```.form-textarea--{color}```
 * - ```.form-select```
 * - ```.form-select--{color}```
 * - ```.form-group````
 * - ```.form-addon```
 * - ```.form-addon--{color}```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	SNavComponent
 * Documentation coming soon...
 */
/**
 * @name 	STableComponent
 * Documentation coming soon...
 */
/**
 * Print out the responsive style for a table.
 * This responsive style make the table display as block and take the "label" attribute on the td to display correctly the line label
 */
/**
 * @name 	STableComponent Classes
 * This file provide the mixins to generate table classes
 */
/**
 * Provide all the classes of the button component like .table, .table--striped, etc...
 * - ```.table```
 * - ```.table--striped```
 * - ```.table--bordered```
 * - ```.table--hover```
 * - ```.table--responsive```
 * - ```.table--responsive-overflow```
 * - ```.table--interactive```
 * - ```.table--middle```
 * - ```.table--center```
 *
 * @param 		{Color} 		[$colors=default primary secondary]	 		Specify the colors to generate
 * @param 		{String} 		[$modifiers=striped bordered hover responsive responsive-overflow interactive middle center] 		Specify the modifiers to generate
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide all the style classes of the button component like .table, .table--striped, etc...
 * - ```.table```
 * - ```.table--striped```
 * - ```.table--bordered```
 * - ```.table--hover```
 * - ```.table--responsive```
 * - ```.table--responsive-overflow```
 * - ```.table--interactive```
 * - ```.table--middle```
 * - ```.table--center```
 *
 * @param 		{Color} 		[$colors=default primary secondary]	 		Specify the colors to generate
 * @param 		{String} 		[$modifiers=striped bordered hover responsive responsive-overflow interactive middle center] 		Specify the modifiers to generate
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide all the bare classes of the button component like .table, .table--striped, etc...
 * - ```.table```
 * - ```.table--striped```
 * - ```.table--bordered```
 * - ```.table--hover```
 * - ```.table--responsive```
 * - ```.table--responsive-overflow```
 * - ```.table--interactive```
 * - ```.table--middle```
 * - ```.table--center```
 *
 * @param 		{String} 		[$modifiers=striped bordered hover responsive responsive-overflow interactive middle center] 		Specify the modifiers to generate
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	STypographyComponent
 * Provide ability to generate base typography classes for:
 * - Titles:
 * 	- ```.h1-h6```
 * 	- ```.tf h1-h6```
 * - Paragraphs
 * 	- ```.p```, ```.tf p```
 * 	- ```.p--lead```, ```.tf p.p--lead```
 * - Links
 * 	- ```.link```, ```.tf a```
 * - Inline text elements
 *  - ```.mark```, ```.tf mark```
 *  - ```.del```, ```.tf del```
 *  - ```.s```, ```.tf s```
 *  - ```.ins```, ```.tf ins```
 *  - ```.u```, ```.tf u```
 *  - ```.small```, ```.tf small```
 *  - ```.strong```, ```.tf strong```
 *  - ```.em```, ```.tf em```
 * - Lists
 * 	- ```.dl```, ```.tf dl```
 * 		- ```.dt```, ```.tf dt```
 * 		- ```.dd```, ```.tf dd```
 * 	- ```.ul```, ```.tf ul```
 * 		- ```.li```, ```.tf li```
 * 	- ```.ol```, ```.tf ol```
 * 		- ```.li```, ```.tf li```
 * - Captions
 * 	- ```.caption```, ```.tf caption```, ```.tf figcaption```
 * - Quotes
 * 	- ```.quote```, ```.tf quote```
 * 	- ```.blockquote```, ```.tf blockquote```
 *
 * See:
 * - [Element level mixins API](./sass/_main.md)
 * - [Classes level mixins API](./sass/_classes.md)
 *
 * @example 	scss
 * // apply the title bare and style to my custom element
 * h1 {
 * 	\@include s-typography-title(4em);
 * }
 * // apply only the bare styling to my custom title
 * h1 {
 * 	\@include s-typography-title-bare(4em);
 * }
 * // apply only the style styling to my custom title
 * h1 {
 * 	\@include s-typography-title-style(4em);
 * }
 *
 * // provide classes for all the typography elements
 * \@include s-typography-classes();
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	STypographyComponent
 * This file provide the mixins to create typography elements
 */
/**
 * Apply the title css
 * @param 		{Number} 		$size 		The size wanted. If unitless, will use modular scale to calculate size
 * @param 		{Integer}		[$base=null] 		The base on which to calculate the modular scale if needed
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the title bare css
 * @param 		{Number} 		$size 				The size wanted. If unitless, will use modular scale to calculate size
 * @param 		{Integer}		[$base=null] 		The base on which to calculate the modular scale if needed
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the title style css
 * @param 		{Number} 		$size 				The size wanted. If unitless, will use modular scale to calculate size
 * @param 		{Integer}		[$base=null] 		The base on which to calculate the modular scale if needed
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the paragraph bare css
 * @param 		{Number} 		$size 				The size wanted
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the paragraph style css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the link css
 * @param 		{Color} 		[$color=primary] 		The color used to style link
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the link bare css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the link style css
 * @param 		{Color} 		[$color=primary] 		The color used to style link
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the inline-text css
 * @param 		{String} 		$tag 		The tag to use the style for
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the inline-text bare css
 * @param 		{String} 		$tag 		The tag to use the style for
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the inline-text css
 * @param 		{String} 		$tag 		The tag to use the style for
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the list css
 * @param 		{String|List} 		$tag 				The tag to style like "ul", "ol li" or "dl dt"
 * @param 		{Color} 			[$color=primary] 	The color used for styling bullets
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the list bare css
 * @param 		{String|List} 		$tag 				The tag to style like "ul", "ol li" or "dl dt"
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the list style css
 * @param 		{String|List} 		$tag 				The tag to style like "ul", "ol li" or "dl dt"
 * @param 		{Color} 			[$color=primary] 	The color used for styling bullets
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the caption css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the caption bare css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the caption style css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the quote css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the quote bare css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Apply the quote style css
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name 	STypographyComponent Classes
 * This file provide the mixins to generate typography classes
 */
/**
 * Provide all the classes of the typography component like titles, paragraphs, lists, etc..
 * @param 		{Color} 	[$color=primary] 		The main color used to generate the texts styles
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the styling for the titles classes:
 * - ```.h1-h6```
 * - ```.tf h1-h6```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the titles classes
 * - ```.h1-h6```
 * - ```.tf h1-h6```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the titles classes
 * - ```.h1-h6```
 * - ```.tf h1-h6```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the styling for the paragraphs classes
 * - ```.p```, ```.tf p```
 * - ```.p--lead```, ```.tf p.p--lead```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the ```.p``` and ```.p--lead``` classes
 * - ```.p```, ```.tf p```
 * - ```.p--lead```, ```.tf p.p--lead```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the ```.p``` class
 * - ```.p```, ```.tf p```
 * - ```.p--lead```, ```.tf p.p--lead```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the styling for the links classes
 * - ```.link```, ```.tf a```
 * @param 		{Color} 		[$color=primary] 		The color used to style links
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the links classes
 * - ```.link```, ```.tf a```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the links classes
 * - ```.link```, ```.tf a```
 * @param 		{Color} 		[$color=primary] 		The color used to style links
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the styling for the inline-text classes
 * - ```.mark```, ```.tf mark```
 * - ```.del```, ```.tf del```
 * - ```.s```, ```.tf s```
 * - ```.ins```, ```.tf ins```
 * - ```.u```, ```.tf u```
 * - ```.small```, ```.tf small```
 * - ```.strong```, ```.tf strong```
 * - ```.em```, ```.tf em```
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the inline-text classes
 * - ```.mark```, ```.tf mark```
 * - ```.del```, ```.tf del```
 * - ```.s```, ```.tf s```
 * - ```.ins```, ```.tf ins```
 * - ```.u```, ```.tf u```
 * - ```.small```, ```.tf small```
 * - ```.strong```, ```.tf strong```
 * - ```.em```, ```.tf em```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the inline-text classes
 * - ```.mark```, ```.tf mark```
 * - ```.del```, ```.tf del```
 * - ```.s```, ```.tf s```
 * - ```.ins```, ```.tf ins```
 * - ```.u```, ```.tf u```
 * - ```.small```, ```.tf small```
 * - ```.strong```, ```.tf strong```
 * - ```.em```, ```.tf em```
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the styling for the lists classes
 * - ```.dl```, ```.tf dl```
 * 	- ```.dt```, ```.tf dt```
 * 	- ```.dd```, ```.tf dd```
 * - ```.ul```, ```.tf ul```
 * 	- ```.li```, ```.tf li```
 * - ```.ol```, ```.tf ol```
 * 	- ```.li```, ```.tf li```
 * @param 		{Color} 		[$color=primary] 		The color used to style bullets
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the lists classes
 * - ```.dl```, ```.tf dl```
 * 	- ```.dt```, ```.tf dt```
 * 	- ```.dd```, ```.tf dd```
 * - ```.ul```, ```.tf ul```
 * 	- ```.li```, ```.tf li```
 * - ```.ol```, ```.tf ol```
 * 	- ```.li```, ```.tf li```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the lists classes
 * - ```.dl```, ```.tf dl```
 * 	- ```.dt```, ```.tf dt```
 * 	- ```.dd```, ```.tf dd```
 * - ```.ul```, ```.tf ul```
 * 	- ```.li```, ```.tf li```
 * - ```.ol```, ```.tf ol```
 * 	- ```.li```, ```.tf li```
 * @param 		{Color} 		[$color=primary] 		The color used to style bullets
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the styling for the captions classes
 * - ```.caption```, ```.figcaption```, ```.tf caption```, ```.tf figcaption```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the captions classes
 * - ```.caption```, ```.figcaption```, ```.tf caption```, ```.tf figcaption```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the captions classes
 * - ```.caption```, ```.figcaption```, ```.tf caption```, ```.tf figcaption```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the styling for the quotes classes
 * - ```.quote```, ```.tf quote```
 * - ```.blockquote```, ```.tf blockquote```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the bare styling for the quotes classes
 * - ```.quote```, ```.tf quote```
 * - ```.blockquote```, ```.tf blockquote```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Provide the style styling for the quotes classes
 * - ```.quote```, ```.tf quote```
 * - ```.blockquote```, ```.tf blockquote```
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
#template-stack {
  /**
	* Setup
	* Setup all the different parts/modules/libraries.
	*/
  /**
 * Setup
 * Setup all the different parts/modules/libraries.
 */
  /**
	* Utils
	* Import all the different utils functions, mixins, classes, etc...
	*/
  /**
 * Utils
 * Import all the different utils functions, mixins, classes, etc...
 */
  /**
	* Generic
	* All the generic codebase for the project like typography, resets, etc...
	*/
  /**
 * Generic
 * All the generic codebase for the project like typography, resets, etc...
 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		default
		 * @color 		#848e91
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		title
		 * @color 		#2b3438
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		text
		 * @color 		#848e91
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		link
		 * @color 		#f2bc2b
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		primary
		 * @color 		#f2bc2b
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		secondary
		 * @color 		#2b3438
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		success
		 * @color 		#5cb85c
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		warning
		 * @color 		#f0ad4e
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		error
		 * @color 		#d9534f
		 * @display 	color
		 */
  /**
		 * @styleguide 	Colors / Swatches
		 * @name 		info
		 * @color 		#2199e8
		 * @display 	color
		 */
  /**
				 * @name   			default
				 * @styleguide 		Fonts / Faces
				 * @display 		font
				 * @font-family 	Helvetica Neue, Helvetica, Verdana, Arial, sans-serif
				 * @font-style 		
				 * @font-weight 	normal
				 */
  /**
				 * @name   			quote
				 * @styleguide 		Fonts / Faces
				 * @display 		font
				 * @font-family 	Palatino, Times, Georgia, serif
				 * @font-style 		
				 * @font-weight 	normal
				 */
  /**
				 * @name   			code
				 * @styleguide 		Fonts / Faces
				 * @display 		font
				 * @font-family 	Menlo, Monaco, Consolas, Courier New, monospace
				 * @font-style 		
				 * @font-weight 	normal
				 */
  /**
			 * @name 	```.tr-fast```
			 * @styleguide  	Helpers / Transitions
			 * @example 	html
			 * <div class="tr-fast">
			 * 	I'm transitionned with fast
			 * </div>
			 */
  /**
			 * @name 	```.tr-default```
			 * @styleguide  	Helpers / Transitions
			 * @example 	html
			 * <div class="tr-default">
			 * 	I'm transitionned with default
			 * </div>
			 */
  /**
			 * @name 	```.tr-slow```
			 * @styleguide  	Helpers / Transitions
			 * @example 	html
			 * <div class="tr-slow">
			 * 	I'm transitionned with slow
			 * </div>
			 */
  /**
			 * @name 	```.f-default```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-default">
			 * 	I have the font "default" applied
			 * </div>
			 */
  /**
			 * @name 	```.f-quote```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-quote">
			 * 	I have the font "quote" applied
			 * </div>
			 */
  /**
			 * @name 	```.f-code```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-code">
			 * 	I have the font "code" applied
			 * </div>
			 */
  /**
			 * @name 	```.m-b-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-smaller" style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-t-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div class="m-t-smaller" style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-l-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div class="m-l-smaller" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-r-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-smaller" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-s-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-smaller" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.p-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-b-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-t-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-l-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-r-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-s-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.m-b-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-small" style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-t-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div class="m-t-small" style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-l-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div class="m-l-small" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-r-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-small" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-s-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-small" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.p-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-b-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-t-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-l-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-r-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-s-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.m-b```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b" style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-t```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div class="m-t" style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-l```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div class="m-l" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-r```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-s```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.p```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-b```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-t```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-l```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-r```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-s```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.m-b-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-medium" style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-t-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div class="m-t-medium" style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-l-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div class="m-l-medium" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-r-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-medium" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-s-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-medium" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.p-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-b-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-t-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-l-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-r-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-s-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.m-b-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-big" style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-t-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div class="m-t-big" style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-l-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div class="m-l-big" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-r-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-big" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-s-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-big" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.p-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-b-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-t-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-l-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-r-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-s-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.m-b-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-bigger" style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-t-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f2bc2b; width:100px; height:5px"></div>
			 * <div class="m-t-bigger" style="background:#2b3438; width:100px; height:5px"></div>
			 */
  /**
			 * @name 	```.m-l-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div class="m-l-bigger" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-r-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-bigger" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.m-s-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-bigger" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
			 */
  /**
			 * @name 	```.p-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-b-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-t-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-l-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-r-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.p-s-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
			 * 	<div style="background:#2b3438; width:100%; height:100%"></div>
			 * </div>
			 */
  /**
			 * @name 	```.s-smaller```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-smaller">
			 * 	I have the size "smaller" defined
			 * </div>
			 */
  /**
			 * @name 	```.s-smaller-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-smaller-rel">
			 * 	I have the size "smaller" defined relative to my parent
			 * </div>
			 */
  /**
			 * @name 	```.s-small```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-small">
			 * 	I have the size "small" defined
			 * </div>
			 */
  /**
			 * @name 	```.s-small-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-small-rel">
			 * 	I have the size "small" defined relative to my parent
			 * </div>
			 */
  /**
			 * @name 	```.s-default```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-default">
			 * 	I have the size "default" defined
			 * </div>
			 */
  /**
			 * @name 	```.s-default-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-default-rel">
			 * 	I have the size "default" defined relative to my parent
			 * </div>
			 */
  /**
			 * @name 	```.s-medium```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-medium">
			 * 	I have the size "medium" defined
			 * </div>
			 */
  /**
			 * @name 	```.s-medium-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-medium-rel">
			 * 	I have the size "medium" defined relative to my parent
			 * </div>
			 */
  /**
			 * @name 	```.s-big```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-big">
			 * 	I have the size "big" defined
			 * </div>
			 */
  /**
			 * @name 	```.s-big-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-big-rel">
			 * 	I have the size "big" defined relative to my parent
			 * </div>
			 */
  /**
			 * @name 	```.s-bigger```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-bigger">
			 * 	I have the size "bigger" defined
			 * </div>
			 */
  /**
			 * @name 	```.s-bigger-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-bigger-rel">
			 * 	I have the size "bigger" defined relative to my parent
			 * </div>
			 */
  /**
		 * @name 	```.no-p-t```
		 * Reset **top** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-t" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-p-r```
		 * Reset **right** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-r" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-p-b```
		 * Reset **bottom** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-b" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-p-l```
		 * Reset **left** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-l" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-p-s```
		 * Reset **left** and **right** paddings
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-s" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-m-t```
		 * Reset **top** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-t" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-m-r```
		 * Reset **right** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-r" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-m-b```
		 * Reset **bottom** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-b" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-m-l```
		 * Reset **left** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-l" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
		 * @name 	```.no-m-s```
		 * Reset **left** and **right** margins
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-m-s" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
		 */
  /**
				 * @name 	```.c-default```
				 * Specify the color to **default**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-default">
				 * 	I'm in "default" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-default```
				 * Specify the background color to **default**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-default p" style="color:white">
				 * 	My background color is "default"
				 * </div>
				 */
  /**
				 * @name 	```.c-title```
				 * Specify the color to **title**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-title">
				 * 	I'm in "title" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-title```
				 * Specify the background color to **title**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-title p" style="color:white">
				 * 	My background color is "title"
				 * </div>
				 */
  /**
				 * @name 	```.c-text```
				 * Specify the color to **text**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-text">
				 * 	I'm in "text" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-text```
				 * Specify the background color to **text**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-text p" style="color:white">
				 * 	My background color is "text"
				 * </div>
				 */
  /**
				 * @name 	```.c-link```
				 * Specify the color to **link**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-link">
				 * 	I'm in "link" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-link```
				 * Specify the background color to **link**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-link p" style="color:white">
				 * 	My background color is "link"
				 * </div>
				 */
  /**
				 * @name 	```.c-primary```
				 * Specify the color to **primary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-primary">
				 * 	I'm in "primary" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-primary```
				 * Specify the background color to **primary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-primary p" style="color:white">
				 * 	My background color is "primary"
				 * </div>
				 */
  /**
				 * @name 	```.c-secondary```
				 * Specify the color to **secondary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-secondary">
				 * 	I'm in "secondary" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-secondary```
				 * Specify the background color to **secondary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-secondary p" style="color:white">
				 * 	My background color is "secondary"
				 * </div>
				 */
  /**
				 * @name 	```.c-success```
				 * Specify the color to **success**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-success">
				 * 	I'm in "success" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-success```
				 * Specify the background color to **success**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-success p" style="color:white">
				 * 	My background color is "success"
				 * </div>
				 */
  /**
				 * @name 	```.c-warning```
				 * Specify the color to **warning**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-warning">
				 * 	I'm in "warning" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-warning```
				 * Specify the background color to **warning**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-warning p" style="color:white">
				 * 	My background color is "warning"
				 * </div>
				 */
  /**
				 * @name 	```.c-error```
				 * Specify the color to **error**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-error">
				 * 	I'm in "error" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-error```
				 * Specify the background color to **error**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-error p" style="color:white">
				 * 	My background color is "error"
				 * </div>
				 */
  /**
				 * @name 	```.c-info```
				 * Specify the color to **info**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-info">
				 * 	I'm in "info" color
				 * </div>
				 */
  /**
				 * @name 	```.bkg-info```
				 * Specify the background color to **info**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-info p" style="color:white">
				 * 	My background color is "info"
				 * </div>
				 */
  /**
	* Layout
	* All the layout level specific styling.
	*/
  /**
 * Layout
 * All the layout level specific styling.
 */
  /**
	* Pages
	* All the pages level specific styling.
	*/
  /**
 * Pages
 * All the pages level specific styling.
 */
  /**
	* Blocks
	* All the blocks styling.
	* A block can contain other blocks or objects and does not have to relay on his ancestors
	* to be properly displayed.
	*/
  /**
 * Blocks
 * All the blocks styling.
 * A block can contain other blocks or objects and does not have to relay on his ancestors
 * to be properly displayed.
 */
  /**
	* Objects
	* All the objects styling.
	* An object response to the same rules has the blocks, unless they cannot contain any other objects or blocks.
	*/
  /**
 * Objects
 * All the objects styling.
 * An object response to the same rules has the blocks, unless they cannot contain any other objects or blocks.
 */
  /**
 * @name 	SSelectComponent Classes
 * This file provide the mixins to generate s-select classes
 */
  /**
 * Provide all the classes of the s-select component for a default style
 * Styling options:
 * - ```[color="{$color}"]``` : apply a color to the select component
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
  /**
 * Provide the bare styling for the s-select classes
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
  /**
 * Provide all the style classes of the s-select component for a default style
 * Styling options:
 * - ```[color="{$color}"]``` : apply a color to the select component
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
  /**
	* Trumps
	* All the things that does not fit in any others directory. Try to keep this folder has small as possible.
	* If you have to many things in here, that mean that you probably need to refactor your codebase...
	*/
  /**
 * Trumps
 * All the things that does not fit in any others directory. Try to keep this folder has small as possible.
 * If you have to many things in here, that mean that you probably need to refactor your codebase...
 */
}

#template-stack html, #template-stack body, #template-stack div, #template-stack span, #template-stack applet, #template-stack object, #template-stack iframe, #template-stack h1, #template-stack h2, #template-stack h3, #template-stack h4, #template-stack h5, #template-stack h6, #template-stack p, #template-stack blockquote, #template-stack pre, #template-stack a, #template-stack abbr, #template-stack acronym, #template-stack address, #template-stack big, #template-stack cite, #template-stack code, #template-stack del, #template-stack dfn, #template-stack em, #template-stack img, #template-stack ins, #template-stack kbd, #template-stack q, #template-stack s, #template-stack samp, #template-stack small, #template-stack strike, #template-stack strong, #template-stack sub, #template-stack sup, #template-stack tt, #template-stack var, #template-stack b, #template-stack u, #template-stack i, #template-stack center, #template-stack dl, #template-stack dt, #template-stack dd, #template-stack ol, #template-stack ul, #template-stack li, #template-stack fieldset, #template-stack form, #template-stack label, #template-stack legend, #template-stack table, #template-stack caption, #template-stack tbody, #template-stack tfoot, #template-stack thead, #template-stack tr, #template-stack th, #template-stack td, #template-stack article, #template-stack aside, #template-stack canvas, #template-stack details, #template-stack embed, #template-stack figure, #template-stack figcaption, #template-stack footer, #template-stack header, #template-stack hgroup, #template-stack menu, #template-stack nav, #template-stack output, #template-stack ruby, #template-stack section, #template-stack summary, #template-stack time, #template-stack mark, #template-stack audio, #template-stack video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

#template-stack article, #template-stack aside, #template-stack details, #template-stack figcaption, #template-stack figure, #template-stack footer, #template-stack header, #template-stack hgroup, #template-stack menu, #template-stack nav, #template-stack section {
  display: block;
}

#template-stack body {
  line-height: 1;
}

#template-stack ol, #template-stack ul {
  list-style: none;
}

#template-stack blockquote, #template-stack q {
  quotes: none;
}

#template-stack blockquote:before, #template-stack blockquote:after {
  content: '';
  content: none;
}

#template-stack q:before, #template-stack q:after {
  content: '';
  content: none;
}

#template-stack table {
  border-collapse: collapse;
  border-spacing: 0;
}

#template-stack .s-settings:after {
  content: '{"unit": "rem", "reset": true, "border-box": true, "sizes": {"smaller": 0.3, "small": 0.6, "default": 1, "medium": 1.4, "big": 2, "bigger": 3}, "typography": {"font-family": "default", "font-size": "13px", "font-sizes": null, "line-letters-count": 55, "font-format": {"eot": "embedded-opentype", "woff2": "woff2", "woff": "woff", "ttf": "truetype", "otf": "opentype", "svg": "svg", "svgz": "svgz"}}, "look-and-feel": {"border-radius": "0em", "padding-vertical": "1.4em", "padding-horizontal": "0.8em", "disabled-opacity": 0.5, "line-height": 1.4}, "spaces": {"default": "20px", "smaller": "5px", "small": "10px", "medium": "40px", "big": "70px", "bigger": "100px"}, "colors": {"default": {"color": "#848e91"}, "title": {"color": "#2b3438"}, "text": {"color": "default"}, "link": {"color": "primary"}, "primary": {"color": "#f2bc2b"}, "secondary": {"color": "#2b3438"}, "success": {"color": "#5cb85c"}, "warning": {"color": "#f0ad4e"}, "error": {"color": "#d9534f"}, "info": {"color": "#2199e8"}}, "modular-scale": {"base": "1rem", "ratio": 1.33}, "text-format": {"scope-class": "tf"}, "vertical-rhythme": {"enabled": true, "scope-class": "vr"}, "BEM": {"standelone-modifier": false, "element-separator": "__", "modifier-separator": "--"}, "fonts": {"default": {"font-family": ["Helvetica Neue", "Helvetica", "Verdana", "Arial", "sans-serif"], "font-weight": "normal", "cap-height": 0.65}, "quote": {"font-family": ["Palatino", "Times", "Georgia", "serif"], "font-weight": "normal", "cap-height": 0.65}, "code": {"font-family": ["Menlo", "Monaco", "Consolas", "Courier New", "monospace"], "font-weight": "normal", "cap-height": 0.65}}, "filters": [], "transitions": {"fast": ["all", "0.1s", "ease-in-out", "0s"], "default": ["all", "0.2s", "ease-in-out", "0s"], "slow": ["all", "0.5s", "ease-in-out", "0s"]}}';
  display: none;
}

#template-stack html {
  box-sizing: border-box;
}

#template-stack *, #template-stack *:before, #template-stack *:after {
  box-sizing: inherit;
}

#template-stack a {
  color: inherit;
}

#template-stack html {
  font-size: 13Px;
  color: #848e91;
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
}

#template-stack body {
  color: #848e91;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#template-stack .tr-fast {
  transition: all 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

#template-stack .tr-default {
  transition: all 0.2s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

#template-stack .tr-slow {
  transition: all 0.5s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

#template-stack .f-default {
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
}

#template-stack .f-quote {
  font-family: Palatino, Times, Georgia, serif;
  font-weight: normal;
}

#template-stack .f-code {
  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
  font-weight: normal;
}

#template-stack .m-b-smaller {
  margin-bottom: 0.38462rem;
}

#template-stack .m-t-smaller {
  margin-top: 0.38462rem;
}

#template-stack .m-l-smaller {
  margin-left: 0.38462rem;
}

#template-stack .m-r-smaller {
  margin-right: 0.38462rem;
}

#template-stack .m-s-smaller {
  margin-left: 0.38462rem;
  margin-right: 0.38462rem;
}

#template-stack .p-smaller {
  padding: 0.38462rem;
}

#template-stack .p-b-smaller {
  padding-bottom: 0.38462rem;
}

#template-stack .p-t-smaller {
  padding-top: 0.38462rem;
}

#template-stack .p-l-smaller {
  padding-left: 0.38462rem;
}

#template-stack .p-r-smaller {
  padding-right: 0.38462rem;
}

#template-stack .p-s-smaller {
  padding-left: 0.38462rem;
  padding-right: 0.38462rem;
}

#template-stack .m-b-small {
  margin-bottom: 0.76923rem;
}

#template-stack .m-t-small {
  margin-top: 0.76923rem;
}

#template-stack .m-l-small {
  margin-left: 0.76923rem;
}

#template-stack .m-r-small {
  margin-right: 0.76923rem;
}

#template-stack .m-s-small {
  margin-left: 0.76923rem;
  margin-right: 0.76923rem;
}

#template-stack .p-small {
  padding: 0.76923rem;
}

#template-stack .p-b-small {
  padding-bottom: 0.76923rem;
}

#template-stack .p-t-small {
  padding-top: 0.76923rem;
}

#template-stack .p-l-small {
  padding-left: 0.76923rem;
}

#template-stack .p-r-small {
  padding-right: 0.76923rem;
}

#template-stack .p-s-small {
  padding-left: 0.76923rem;
  padding-right: 0.76923rem;
}

#template-stack .m-b {
  margin-bottom: 1.53846rem;
}

#template-stack .m-t {
  margin-top: 1.53846rem;
}

#template-stack .m-l {
  margin-left: 1.53846rem;
}

#template-stack .m-r {
  margin-right: 1.53846rem;
}

#template-stack .m-s {
  margin-left: 1.53846rem;
  margin-right: 1.53846rem;
}

#template-stack .p:not(p) {
  padding: 1.53846rem;
}

#template-stack .p-b {
  padding-bottom: 1.53846rem;
}

#template-stack .p-t {
  padding-top: 1.53846rem;
}

#template-stack .p-l {
  padding-left: 1.53846rem;
}

#template-stack .p-r {
  padding-right: 1.53846rem;
}

#template-stack .p-s {
  padding-left: 1.53846rem;
  padding-right: 1.53846rem;
}

#template-stack .m-b-medium {
  margin-bottom: 3.07692rem;
}

#template-stack .m-t-medium {
  margin-top: 3.07692rem;
}

#template-stack .m-l-medium {
  margin-left: 3.07692rem;
}

#template-stack .m-r-medium {
  margin-right: 3.07692rem;
}

#template-stack .m-s-medium {
  margin-left: 3.07692rem;
  margin-right: 3.07692rem;
}

#template-stack .p-medium {
  padding: 3.07692rem;
}

#template-stack .p-b-medium {
  padding-bottom: 3.07692rem;
}

#template-stack .p-t-medium {
  padding-top: 3.07692rem;
}

#template-stack .p-l-medium {
  padding-left: 3.07692rem;
}

#template-stack .p-r-medium {
  padding-right: 3.07692rem;
}

#template-stack .p-s-medium {
  padding-left: 3.07692rem;
  padding-right: 3.07692rem;
}

#template-stack .m-b-big {
  margin-bottom: 5.38462rem;
}

#template-stack .m-t-big {
  margin-top: 5.38462rem;
}

#template-stack .m-l-big {
  margin-left: 5.38462rem;
}

#template-stack .m-r-big {
  margin-right: 5.38462rem;
}

#template-stack .m-s-big {
  margin-left: 5.38462rem;
  margin-right: 5.38462rem;
}

#template-stack .p-big {
  padding: 5.38462rem;
}

#template-stack .p-b-big {
  padding-bottom: 5.38462rem;
}

#template-stack .p-t-big {
  padding-top: 5.38462rem;
}

#template-stack .p-l-big {
  padding-left: 5.38462rem;
}

#template-stack .p-r-big {
  padding-right: 5.38462rem;
}

#template-stack .p-s-big {
  padding-left: 5.38462rem;
  padding-right: 5.38462rem;
}

#template-stack .m-b-bigger {
  margin-bottom: 7.69231rem;
}

#template-stack .m-t-bigger {
  margin-top: 7.69231rem;
}

#template-stack .m-l-bigger {
  margin-left: 7.69231rem;
}

#template-stack .m-r-bigger {
  margin-right: 7.69231rem;
}

#template-stack .m-s-bigger {
  margin-left: 7.69231rem;
  margin-right: 7.69231rem;
}

#template-stack .p-bigger {
  padding: 7.69231rem;
}

#template-stack .p-b-bigger {
  padding-bottom: 7.69231rem;
}

#template-stack .p-t-bigger {
  padding-top: 7.69231rem;
}

#template-stack .p-l-bigger {
  padding-left: 7.69231rem;
}

#template-stack .p-r-bigger {
  padding-right: 7.69231rem;
}

#template-stack .p-s-bigger {
  padding-left: 7.69231rem;
  padding-right: 7.69231rem;
}

#template-stack .s-smaller {
  font-size: 0.3rem;
}

#template-stack .s-smaller-rel {
  font-size: 0.3em;
}

#template-stack .s-small {
  font-size: 0.6rem;
}

#template-stack .s-small-rel {
  font-size: 0.6em;
}

#template-stack .s-default {
  font-size: 1rem;
}

#template-stack .s-default-rel {
  font-size: 1em;
}

#template-stack .s-medium {
  font-size: 1.4rem;
}

#template-stack .s-medium-rel {
  font-size: 1.4em;
}

#template-stack .s-big {
  font-size: 2rem;
}

#template-stack .s-big-rel {
  font-size: 2em;
}

#template-stack .s-bigger {
  font-size: 3rem;
}

#template-stack .s-bigger-rel {
  font-size: 3em;
}

#template-stack .no-p-t {
  padding-top: 0 !important;
}

#template-stack .no-p-r {
  padding-right: 0 !important;
}

#template-stack .no-p-b {
  padding-bottom: 0 !important;
}

#template-stack .no-p-l {
  padding-left: 0 !important;
}

#template-stack .no-p-s {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

#template-stack .no-m-t {
  margin-top: 0 !important;
}

#template-stack .no-m-r {
  margin-right: 0 !important;
}

#template-stack .no-m-b {
  margin-bottom: 0 !important;
}

#template-stack .no-m-l {
  margin-left: 0 !important;
}

#template-stack .no-m-s {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

#template-stack .c-default {
  color: #848e91;
}

#template-stack .bkg-default {
  background-color: #848e91;
}

#template-stack .c-title {
  color: #2b3438;
}

#template-stack .bkg-title {
  background-color: #2b3438;
}

#template-stack .c-text {
  color: #848e91;
}

#template-stack .bkg-text {
  background-color: #848e91;
}

#template-stack .c-link {
  color: #f2bc2b;
}

#template-stack .bkg-link {
  background-color: #f2bc2b;
}

#template-stack .c-primary {
  color: #f2bc2b;
}

#template-stack .bkg-primary {
  background-color: #f2bc2b;
}

#template-stack .c-secondary {
  color: #2b3438;
}

#template-stack .bkg-secondary {
  background-color: #2b3438;
}

#template-stack .c-success {
  color: #5cb85c;
}

#template-stack .bkg-success {
  background-color: #5cb85c;
}

#template-stack .c-warning {
  color: #f0ad4e;
}

#template-stack .bkg-warning {
  background-color: #f0ad4e;
}

#template-stack .c-error {
  color: #d9534f;
}

#template-stack .bkg-error {
  background-color: #d9534f;
}

#template-stack .c-info {
  color: #2199e8;
}

#template-stack .bkg-info {
  background-color: #2199e8;
}

@keyframes page-switcher-select-in {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(-100%);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(-50%);
  }
}

#template-stack .page-switcher {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 999999;
}

#template-stack .page-switcher__container {
  box-shadow: rgba(0, 0, 0, 0.2) 0 20px 30px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%) translateZ(0);
  opacity: 0;
  top: 20%;
  width: 38.46154rem;
  background: white;
  padding: 1.53846rem;
  animation: page-switcher-select-in .1s ease-in-out 0s forwards;
}

#template-stack .ts-select__selection-tag {
  display: inline-block;
}

#template-stack .ts-select__reset {
  background-size: 100% 100%;
  background-color: transparent;
  border: none;
  position: absolute;
}

#template-stack .ts-select__selection-tag-close {
  background-size: 100% 100%;
}

#template-stack .ts-select__option--disabled {
  opacity: 0.5;
}

#template-stack .ts-select__selection-tag-close {
  height: 0.8em;
  width: 0.8em;
  vertical-align: middle;
  cursor: pointer;
  display: inline-block;
}

#template-stack .ts-select__reset {
  right: 3.5em;
  top: 50%;
  transform: translateY(-50%);
  height: 1em;
  width: 1em;
  vertical-align: middle;
  cursor: pointer;
  outline: none;
  font-size: .8em;
}

#template-stack .ts-select__search-field {
  border-radius: 0em;
  padding: 0.8em 1.4em;
}

#template-stack .ts-select {
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
  background-size: 9px 6px;
  background-position: right center;
  background-origin: content-box;
  background-repeat: no-repeat;
  background-color: white;
  border-radius: 0em;
  padding: 0 1.4em;
  height: 2.6em;
}

#template-stack .ts-select:not(input):not(select) {
  padding: 0.8em 1.4em;
}

#template-stack .ts-select::-ms-expand {
  display: none;
}

#template-stack .ts-select.ts-select--multiple {
  transition: none;
}

#template-stack .ts-select.ts-select--multiple:not(.ts-select--placeholder) {
  padding: 0.24em 1.4em;
  height: auto !important;
}

#template-stack .ts-select .ts-select__dropdown {
  border-radius: 0em;
}

#template-stack .ts-select .ts-select__search-container {
  padding: 0.8em;
}

#template-stack .ts-select .ts-select__search-field {
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
  border-radius: 0em;
  padding: 0 1.4em;
  height: 2.6em;
  border-radius: 0em;
}

#template-stack .ts-select .ts-select__search-field:not(input):not(select) {
  padding: 0.8em 1.4em;
}

#template-stack .ts-select .ts-select__search-field::-webkit-contacts-auto-fill-button {
  visibility: hidden;
  display: none !important;
  pointer-events: none;
  position: absolute;
  right: 0;
}

#template-stack .ts-select .ts-select__search-field::-ms-clear {
  display: none;
}

#template-stack .ts-select .ts-select__selection-tag {
  border-radius: 0em;
  font-size: 0.9em;
  margin-right: 0.46667em;
  margin-top: 0.24em;
  margin-bottom: 0.24em;
  height: calc(0.8em + 0.9em);
  line-height: calc(0.8em + 0.9em + 0.1em);
  padding: 0 0.7em;
  position: relative;
  left: -0.7em;
}

#template-stack .ts-select .ts-select__selection-tag-close {
  margin-left: 0.46667em;
}

#template-stack .ts-select .ts-select__option:not(.ts-select__option--custom),
#template-stack .ts-select .ts-select__optgroup:not(.ts-select__optgroup--custom) {
  padding: 0.8em 1.4em;
}

#template-stack .ts-select .ts-select__option--in-optgroup {
  padding-left: 2.1em !important;
}

#template-stack .ts-select {
  background-color: white;
  color: #848e91;
  transition: border 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  border-color: rgba(132, 142, 145, 0.1);
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'%3E%3Cpolygon points='0,0 32,0 16,24' style='fill:%23848e91'%3E%3C/polygon%3E%3C/svg%3E");
}

#template-stack .ts-select::-webkit-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select:-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select::-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select:-ms-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

.input--placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select:disabled {
  opacity: 0.5;
}

[data-input-activator]:focus ~ #template-stack .ts-select,
[data-input-activator]:checked ~ #template-stack .ts-select, #template-stack .ts-select:hover:not(:disabled) {
  border-bottom-color: rgba(132, 142, 145, 0.6);
}

[data-input-activator]:focus ~ #template-stack .ts-select,
[data-input-activator]:checked ~ #template-stack .ts-select, #template-stack .ts-select:focus:not(:disabled), #template-stack .ts-select.active:not(:disabled) {
  border-color: rgba(132, 142, 145, 0.6);
}

#template-stack .ts-select.vr,
.vr #template-stack .ts-select {
  margin-bottom: 1rem;
}

select:disabled + #template-stack .ts-select {
  opacity: 0.5;
}

#template-stack .ts-select__search-field {
  width: 100%;
  height: 100%;
  outline: none;
  color: #848e91;
  background-color: white;
  border: 1px solid rgba(132, 142, 145, 0.5);
}

#template-stack .ts-select__search-field::-webkit-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select__search-field:-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select__search-field::-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select__search-field:-ms-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

.input--placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack .ts-select__dropdown {
  top: calc(100% + 3px);
  margin-top: -20px;
  transition: all 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  background: white;
  box-shadow: rgba(0, 0, 0, 0.2) 0 20px 30px;
}

#template-stack .ts-select--opened .ts-select__dropdown {
  margin-top: 0;
}

#template-stack .ts-select .ts-select__optgroup:not(.ts-select__optgroup--custom) {
  font-weight: bold;
}

#template-stack .ts-select__option {
  color: #848e91;
  transition: background 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

#template-stack select[required] + .ts-select--placeholder .ts-select__selection:after {
  content: ' *';
  color: #d9534f;
  font-size: .7em;
}

#template-stack select[is="ts-select"][color="default"] + .ts-select,
#template-stack .ts-select {
  color: #848e91;
  transition: border 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  border-color: rgba(132, 142, 145, 0.1);
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'%3E%3Cpolygon points='0,0 32,0 16,24' style='fill:%23848e91'%3E%3C/polygon%3E%3C/svg%3E");
}

#template-stack select[is="ts-select"][color="default"] + .ts-select::-webkit-input-placeholder,
#template-stack .ts-select::-webkit-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select:-moz-placeholder,
#template-stack .ts-select:-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select::-moz-placeholder,
#template-stack .ts-select::-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select:-ms-input-placeholder,
#template-stack .ts-select:-ms-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

.input--placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select:disabled,
#template-stack .ts-select:disabled {
  opacity: 0.5;
}

[data-input-activator]:focus ~ #template-stack select[is="ts-select"][color="default"] + .ts-select,
[data-input-activator]:checked ~ #template-stack select[is="ts-select"][color="default"] + .ts-select, #template-stack select[is="ts-select"][color="default"] + .ts-select:hover:not(:disabled), [data-input-activator]:focus ~
#template-stack .ts-select,
[data-input-activator]:checked ~
#template-stack .ts-select,
#template-stack .ts-select:hover:not(:disabled) {
  border-bottom-color: rgba(132, 142, 145, 0.6);
}

[data-input-activator]:focus ~ #template-stack select[is="ts-select"][color="default"] + .ts-select,
[data-input-activator]:checked ~ #template-stack select[is="ts-select"][color="default"] + .ts-select, #template-stack select[is="ts-select"][color="default"] + .ts-select:focus:not(:disabled), #template-stack select[is="ts-select"][color="default"] + .ts-select.active:not(:disabled), [data-input-activator]:focus ~
#template-stack .ts-select,
[data-input-activator]:checked ~
#template-stack .ts-select,
#template-stack .ts-select:focus:not(:disabled),
#template-stack .ts-select.active:not(:disabled) {
  border-color: rgba(132, 142, 145, 0.6);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__search-container,
#template-stack .ts-select .ts-select__search-container {
  background: rgba(132, 142, 145, 0.1);
  border-bottom: 1px solid rgba(132, 142, 145, 0.2);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__selection-tag,
#template-stack .ts-select .ts-select__selection-tag {
  background: rgba(132, 142, 145, 0.6);
  color: white;
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__reset,
#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__selection-tag-close,
#template-stack .ts-select .ts-select__reset,
#template-stack .ts-select .ts-select__selection-tag-close {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A%23848e91;}</style><path d="M443.6,387.1L312.4,255.4l131.5-130c5.4-5.4,5.4-14.2,0-19.6l-37.4-37.6c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4  L256,197.8L124.9,68.3c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4L68,105.9c-5.4,5.4-5.4,14.2,0,19.6l131.5,130L68.4,387.1  c-2.6,2.6-4.1,6.1-4.1,9.8c0,3.7,1.4,7.2,4.1,9.8l37.4,37.6c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1L256,313.1l130.7,131.1  c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1l37.4-37.6c2.6-2.6,4.1-6.1,4.1-9.8C447.7,393.2,446.2,389.7,443.6,387.1z"/></svg>');
  opacity: .65;
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__reset:hover,
#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__selection-tag-close:hover,
#template-stack .ts-select .ts-select__reset:hover,
#template-stack .ts-select .ts-select__selection-tag-close:hover {
  opacity: 1;
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__option--selected,
#template-stack .ts-select .ts-select__option--selected {
  background: rgba(132, 142, 145, 0.2);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__option.active,
#template-stack .ts-select .ts-select__option.active {
  background: rgba(132, 142, 145, 0.3);
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__option:hover, #template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__option:active,
#template-stack .ts-select .ts-select__option:hover,
#template-stack .ts-select .ts-select__option:active {
  background: rgba(132, 142, 145, 0.6);
  color: white;
}

#template-stack select[is="ts-select"][color="default"] + .ts-select .ts-select__search-result,
#template-stack .ts-select .ts-select__search-result {
  background: #848e91;
  color: white;
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select,
#template-stack .ts-select--primary {
  color: #848e91;
  transition: border 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  border-color: rgba(242, 188, 43, 0.1);
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'%3E%3Cpolygon points='0,0 32,0 16,24' style='fill:%23f2bc2b'%3E%3C/polygon%3E%3C/svg%3E");
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select::-webkit-input-placeholder,
#template-stack .ts-select--primary::-webkit-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select:-moz-placeholder,
#template-stack .ts-select--primary:-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select::-moz-placeholder,
#template-stack .ts-select--primary::-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select:-ms-input-placeholder,
#template-stack .ts-select--primary:-ms-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

.input--placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select:disabled,
#template-stack .ts-select--primary:disabled {
  opacity: 0.5;
}

[data-input-activator]:focus ~ #template-stack select[is="ts-select"][color="primary"] + .ts-select,
[data-input-activator]:checked ~ #template-stack select[is="ts-select"][color="primary"] + .ts-select, #template-stack select[is="ts-select"][color="primary"] + .ts-select:hover:not(:disabled), [data-input-activator]:focus ~
#template-stack .ts-select--primary,
[data-input-activator]:checked ~
#template-stack .ts-select--primary,
#template-stack .ts-select--primary:hover:not(:disabled) {
  border-bottom-color: rgba(242, 188, 43, 0.6);
}

[data-input-activator]:focus ~ #template-stack select[is="ts-select"][color="primary"] + .ts-select,
[data-input-activator]:checked ~ #template-stack select[is="ts-select"][color="primary"] + .ts-select, #template-stack select[is="ts-select"][color="primary"] + .ts-select:focus:not(:disabled), #template-stack select[is="ts-select"][color="primary"] + .ts-select.active:not(:disabled), [data-input-activator]:focus ~
#template-stack .ts-select--primary,
[data-input-activator]:checked ~
#template-stack .ts-select--primary,
#template-stack .ts-select--primary:focus:not(:disabled),
#template-stack .ts-select--primary.active:not(:disabled) {
  border-color: rgba(242, 188, 43, 0.6);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__search-container,
#template-stack .ts-select--primary .ts-select__search-container {
  background: rgba(242, 188, 43, 0.1);
  border-bottom: 1px solid rgba(242, 188, 43, 0.2);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__selection-tag,
#template-stack .ts-select--primary .ts-select__selection-tag {
  background: rgba(242, 188, 43, 0.6);
  color: white;
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__reset,
#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__selection-tag-close,
#template-stack .ts-select--primary .ts-select__reset,
#template-stack .ts-select--primary .ts-select__selection-tag-close {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A%23f2bc2b;}</style><path d="M443.6,387.1L312.4,255.4l131.5-130c5.4-5.4,5.4-14.2,0-19.6l-37.4-37.6c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4  L256,197.8L124.9,68.3c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4L68,105.9c-5.4,5.4-5.4,14.2,0,19.6l131.5,130L68.4,387.1  c-2.6,2.6-4.1,6.1-4.1,9.8c0,3.7,1.4,7.2,4.1,9.8l37.4,37.6c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1L256,313.1l130.7,131.1  c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1l37.4-37.6c2.6-2.6,4.1-6.1,4.1-9.8C447.7,393.2,446.2,389.7,443.6,387.1z"/></svg>');
  opacity: .65;
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__reset:hover,
#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__selection-tag-close:hover,
#template-stack .ts-select--primary .ts-select__reset:hover,
#template-stack .ts-select--primary .ts-select__selection-tag-close:hover {
  opacity: 1;
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__option--selected,
#template-stack .ts-select--primary .ts-select__option--selected {
  background: rgba(242, 188, 43, 0.2);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__option.active,
#template-stack .ts-select--primary .ts-select__option.active {
  background: rgba(242, 188, 43, 0.3);
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__option:hover, #template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__option:active,
#template-stack .ts-select--primary .ts-select__option:hover,
#template-stack .ts-select--primary .ts-select__option:active {
  background: rgba(242, 188, 43, 0.6);
  color: white;
}

#template-stack select[is="ts-select"][color="primary"] + .ts-select .ts-select__search-result,
#template-stack .ts-select--primary .ts-select__search-result {
  background: #f2bc2b;
  color: white;
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select,
#template-stack .ts-select--secondary {
  color: #848e91;
  transition: border 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  border-color: rgba(43, 52, 56, 0.1);
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'%3E%3Cpolygon points='0,0 32,0 16,24' style='fill:%232b3438'%3E%3C/polygon%3E%3C/svg%3E");
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select::-webkit-input-placeholder,
#template-stack .ts-select--secondary::-webkit-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select:-moz-placeholder,
#template-stack .ts-select--secondary:-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select::-moz-placeholder,
#template-stack .ts-select--secondary::-moz-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select:-ms-input-placeholder,
#template-stack .ts-select--secondary:-ms-input-placeholder {
  color: rgba(132, 142, 145, 0.4);
}

.input--placeholder {
  color: rgba(132, 142, 145, 0.4);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select:disabled,
#template-stack .ts-select--secondary:disabled {
  opacity: 0.5;
}

[data-input-activator]:focus ~ #template-stack select[is="ts-select"][color="secondary"] + .ts-select,
[data-input-activator]:checked ~ #template-stack select[is="ts-select"][color="secondary"] + .ts-select, #template-stack select[is="ts-select"][color="secondary"] + .ts-select:hover:not(:disabled), [data-input-activator]:focus ~
#template-stack .ts-select--secondary,
[data-input-activator]:checked ~
#template-stack .ts-select--secondary,
#template-stack .ts-select--secondary:hover:not(:disabled) {
  border-bottom-color: rgba(43, 52, 56, 0.6);
}

[data-input-activator]:focus ~ #template-stack select[is="ts-select"][color="secondary"] + .ts-select,
[data-input-activator]:checked ~ #template-stack select[is="ts-select"][color="secondary"] + .ts-select, #template-stack select[is="ts-select"][color="secondary"] + .ts-select:focus:not(:disabled), #template-stack select[is="ts-select"][color="secondary"] + .ts-select.active:not(:disabled), [data-input-activator]:focus ~
#template-stack .ts-select--secondary,
[data-input-activator]:checked ~
#template-stack .ts-select--secondary,
#template-stack .ts-select--secondary:focus:not(:disabled),
#template-stack .ts-select--secondary.active:not(:disabled) {
  border-color: rgba(43, 52, 56, 0.6);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__search-container,
#template-stack .ts-select--secondary .ts-select__search-container {
  background: rgba(43, 52, 56, 0.1);
  border-bottom: 1px solid rgba(43, 52, 56, 0.2);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__selection-tag,
#template-stack .ts-select--secondary .ts-select__selection-tag {
  background: rgba(43, 52, 56, 0.6);
  color: white;
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__reset,
#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__selection-tag-close,
#template-stack .ts-select--secondary .ts-select__reset,
#template-stack .ts-select--secondary .ts-select__selection-tag-close {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A%232b3438;}</style><path d="M443.6,387.1L312.4,255.4l131.5-130c5.4-5.4,5.4-14.2,0-19.6l-37.4-37.6c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4  L256,197.8L124.9,68.3c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4L68,105.9c-5.4,5.4-5.4,14.2,0,19.6l131.5,130L68.4,387.1  c-2.6,2.6-4.1,6.1-4.1,9.8c0,3.7,1.4,7.2,4.1,9.8l37.4,37.6c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1L256,313.1l130.7,131.1  c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1l37.4-37.6c2.6-2.6,4.1-6.1,4.1-9.8C447.7,393.2,446.2,389.7,443.6,387.1z"/></svg>');
  opacity: .65;
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__reset:hover,
#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__selection-tag-close:hover,
#template-stack .ts-select--secondary .ts-select__reset:hover,
#template-stack .ts-select--secondary .ts-select__selection-tag-close:hover {
  opacity: 1;
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__option--selected,
#template-stack .ts-select--secondary .ts-select__option--selected {
  background: rgba(43, 52, 56, 0.2);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__option.active,
#template-stack .ts-select--secondary .ts-select__option.active {
  background: rgba(43, 52, 56, 0.3);
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__option:hover, #template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__option:active,
#template-stack .ts-select--secondary .ts-select__option:hover,
#template-stack .ts-select--secondary .ts-select__option:active {
  background: rgba(43, 52, 56, 0.6);
  color: white;
}

#template-stack select[is="ts-select"][color="secondary"] + .ts-select .ts-select__search-result,
#template-stack .ts-select--secondary .ts-select__search-result {
  background: #2b3438;
  color: white;
}
